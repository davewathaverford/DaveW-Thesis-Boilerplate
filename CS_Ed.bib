
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%                                                                                             %%%%%%%%
%%%%%%%%                                                                                             %%%%%%%%
%%%%%%%%                                    REMEMBER!                                                %%%%%%%%
%%%%%%%%                                                                                             %%%%%%%%
%%%%%%%%    Please update this file on the github repository, not in an overleaf project             %%%%%%%%
%%%%%%%%    Overleaf projects should link to the URL                                                 %%%%%%%%
%%%%%%%%           http://cs.haverford.edu/people/davew/DaveW-Thesis-Boilerplate/CS_Ed.bib           %%%%%%%%
%%%%%%%%    (Click "upload" (the up-arrow below "menu" in the upper left"),                          %%%%%%%%
%%%%%%%%     choose "From External URL", and paste that URL in the box,                              %%%%%%%%
%%%%%%%%     and, a couple of minutes after each edit, click "refresh" in the file in overleaf);     %%%%%%%%
%%%%%%%%     If that doesn't seem update from this git repo, every few minutes, email davew.)        %%%%%%%%
%%%%%%%%                                                                                             %%%%%%%%
%%%%%%%%    Unless you're editing directly on github.com, remember to pull first!                    %%%%%%%%
%%%%%%%%    (changes should show up within 2 min. if you "refresh" the imported file in overleaf)    %%%%%%%%
%%%%%%%%                                                                                             %%%%%%%%
%%%%%%%%    When adding to the bibliography:                                                         %%%%%%%%
%%%%%%%%      * please keep things sorted by year                                                    %%%%%%%%
%%%%%%%%        + Web sites, etc., should go at the end                                              %%%%%%%%
%%%%%%%%      * please use labels structured author(s) year ":" topic/idea/title, e.g.:              %%%%%%%%
%%%%%%%%        + 1-author papers, e.g. Sorva13:Notiona1                                             %%%%%%%%
%%%%%%%%        + many-author papers, e.g., CFF01:stepper, FFFK18:HtDP                               %%%%%%%%
%%%%%%%%        + Note:                                                                              %%%%%%%%
%%%%%%%%             standard structure makes it easy to type the citation in overleaf.com           %%%%%%%%
%%%%%%%%             if I have to edit these, I'll keep the old label as a comment, e.g. DuBoulay    %%%%%%%%
%%%%%%%%                                                                                             %%%%%%%%
%%%%%%%%    Last edits: misc 2024-09-03 Eastern Time                                                 %%%%%%%%
%%%%%%%%                                                                                             %%%%%%%%
%%%%%%%%    TODO: generate "anonymized" version of this file automatically, somehow                  %%%%%%%%
%%%%%%%%                                                                                             %%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%  List of CS Education articles, sorted by year, and, within that, alphabetically by first author
%%    Also, we could add comments like % TAG: ExperimentalDesign, and then search for them
%% Tags include: ExperimentalDesign, NotionalMachine, Recursion, LowLevel, OOP, Accessibility



%%%%%%%%%%%%%%  Articles published in 1932  %%%%%%%%%%%%%%

@article{Church32:Lambda,
title   = {A set of postulates for the foundation of logic},
author  = {Alonzo Church},
year    = 1932,
month   = Apr,
journal = {Annals of Mathematics},
volume  = {33},
number  = {2},
pages   = {346–366},
doi     = {10.2307/1968337},
}

%%%%%%%%%%%%%%  Articles published in 1936  %%%%%%%%%%%%%%

@article{Church36:Lambda,
title   = {An unsolvable problem of elementary number theory},
author  = {Alonzo Church},
year    = 1936,
month   = Apr,
journal = {American Journal of Mathematics},
volume  = {58},
number  = {3},
pages   = {345–363},
doi     = {10.2307/2371045}
}



%%%%%%%%%%%%%%  Articles published in 1981  %%%%%%%%%%%%%%

% TAG: NotionalMachine
%%% WAS: DuBoulay:Notional81
@article{DOM81:Notional,
title = {The black box inside the glass box: presenting computing concepts to novices},
journal = {International Journal of Man-Machine Studies},
volume = {14},
number = {3},
pages = {237-249},
year = {1981},
issn = {0020-7373},
doi = {https://doi.org/10.1016/S0020-7373(81)80056-9},
url = {https://www.sciencedirect.com/science/article/pii/S0020737381800569},
author = {Benedict du Boulay and Tim O'Shea and John Monk},
abstract = {Simplicity and visibility are two important characteristics of programming languages for
novices. Novices start programming with very little idea of the properties of the notional machine
implied by the language they are learning. To help them learn these properties, the notional machine
should be simple. That is, it should consist of a small number of parts that interact in ways that
can be easily understood, possibly by analogy to other mechanisms with which the novice is more familiar.
A notional machine is the idealized model of the computer implied by the constructs of the programming
language. Visibility is concerned with methods for viewing selected parts and processes of this
notional machine in action. We introduce the term “commentary” which is the system's dynamic
characterization of the notional machine, expressed in either text or pictures on the user's terminal.
We examine the simplicity and visibility of three systems, each designed to provide programming experience
to different populations of novices.}
}

%%%%%%%%%%%%%%  Articles published in 1983  %%%%%%%%%%%%%%

% TAG:Recursion
@inproceedings{Kahney:NoviceRec83,
author = {Kahney, Hank},
title = {What Do Novice Programmers Know about Recursion},
year = {1983},
isbn = {0897911210},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800045.801618},
doi = {10.1145/800045.801618},
abstract = {Recent research into differences between novice and expert computer programmers has provided evidence that experts know more than novices, and what they know is better organized. The conclusion is only as interesting as it is intuitive. This paper reports an experiment which was designed to determine precisely what novice programmers understand about the behaviour of recursive procedures, and exactly how their understanding differs from an expert's understanding of the process. The results show that different novices understand, or misunderstand, different things. Implications of the findings are discussed with respect to other research into novice and expert programming performance.},
booktitle = {Proceedings of the SIGCHI Conference on Human Factors in Computing Systems},
pages = {235–239},
numpages = {5},
location = {Boston, Massachusetts, USA},
series = {CHI '83}
}


%%%%%%%%%%%%%%  Articles published in 1984  %%%%%%%%%%%%%%

% inproceedings{10.1145/800039.808655,
@inproceedings{Ford84:Recursion,
author = {Ford, Gary},
title = {An Implementation-Independent Approach to Teaching Recursion},
year = {1984},
isbn = {0897911261},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800039.808655},
doi = {10.1145/800039.808655},
abstract = {The principle of abstraction, of separating a concept from a particular implementation of that concept, is gaining increasingly widespread use in programming and problem solving, and in teaching these subjects. A method of teaching the abstract concept of recursion, independent of its implementation, is presented.},
booktitle = {Proceedings of the Fifteenth SIGCSE Technical Symposium on Computer Science Education},
pages = {213–216},
numpages = {4},
series = {SIGCSE '84},
annotate = {Bases thinking about recursion on ``procedural abstraction'' and ``math. induction''; interesting examples focusing on understanding of {\em corrrectness} of algorithms, with both ``weak'' and ``strong'' induction; an interesting claim that induction is more fundamental than axioms and theorems.}
}

@article{10.1145/952980.808655,
author = {Ford, Gary},
title = {An Implementation-Independent Approach to Teaching Recursion},
year = {1984},
issue_date = {February 1984},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {16},
number = {1},
issn = {0097-8418},
url = {https://doi.org/10.1145/952980.808655},
doi = {10.1145/952980.808655},
abstract = {The principle of abstraction, of separating a concept from a particular implementation of that concept, is gaining increasingly widespread use in programming and problem solving, and in teaching these subjects. A method of teaching the abstract concept of recursion, independent of its implementation, is presented.},
journal = {SIGCSE Bull.},
month = {jan},
pages = {213–216},
numpages = {4}
}

%%%%%%%%%%%%%%  Articles published in 1986  %%%%%%%%%%%%%%

% TAG: NotionalMachine
% SAGE id is doi:10.2190/3LFX-9RRF-67T8-UVK9
@article{DuBoulay:Notional86,
author = {Benedict Du Boulay},
title ={Some Difficulties of Learning to Program},
journal = {Journal of Educational Computing Research},
volume = {2},
number = {1},
pages = {57-73},
year = {1986},
doi = {10.2190/3LFX-9RRF-67T8-UVK9},
URL = {
        https://doi.org/10.2190/3LFX-9RRF-67T8-UVK9
},
eprint = {
        https://doi.org/10.2190/3LFX-9RRF-67T8-UVK9
},
    abstract = {This article is a brief introduction to some of the issues that teachers of programming may find helpful.
    It starts by presenting a fairly idiosyncratic view of teaching programming which makes use of mechanistic analogies and points out some of the pitfalls.
    The article goes on to examine certain errors based on the misapplication of analogies as well as certain interaction errors.
    The main emphasis is on the notional machine both at the general level of understanding (and misunderstanding)
      the relationship of the terminal to the computer as such, as well as at the more specific level of understanding assignment.
    Notation and mistakes that poorly-designed languages can induce novices to commit are discussed. }
}

%%%%%%%%%%%%%%  Book published in 1992  %%%%%%%%%%%%%%
@book{booth1992learning,
  title={Learning to Program: A Phenomenographic Perspective},
  author={Booth, S.},
  isbn={9789173462563},
  lccn={94107307},
  series={Acta Universitatis Gothoburgensis: G{\"o}teborg studies in educational sciences},
  url={https://books.google.com/books?id=q\_slAQAAIAAJ},
  year={1992},
  publisher={Acta Universitatis Gothoburgensis}
}

%%%%%%%%%%%%%%  Articles published in 1993  %%%%%%%%%%%%%%

@TECHREPORT{F93,
    author = {Lindsey Ford},
    title = {How Programmers Visualize Programs},
    year = {1993}
}

%%%%%%%%%%%%%%  Articles published in 1996  %%%%%%%%%%%%%%

@book{AS96:SICP,
author = {Abelson, Harold and Sussman, Gerald J.},
title = {Structure and Interpretation of Computer Programs},
year = {1996},
isbn = {0262011530},
publisher = {MIT Press},
address = {Cambridge, MA, USA},
edition = {2nd},
url = {mitpress.mit.edu/sites/default/files/sicp/full-text/book/book.html},
abstract = {From the Publisher:With an analytical and rigorous approach to problem solving and programming techniques,this book is oriented toward engineering. Structure and Interpretation of Computer Programs emphasizes the central role played by different approaches to dealing with time in computational models. Its unique approach makes it appropriate for an introduction to computer science courses,as well as programming languages and program design.}
}

%TAG: VisuallyImpaired
@inproceedings{10.1145/228347.228354,
author = {Raman, T. V.},
title = {Emacspeak—Direct Speech Access},
year = {1996},
isbn = {0897917766},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/228347.228354},
doi = {10.1145/228347.228354},
abstract = {Emacspeak is a full-fledged speech output inter- face to Emacs, and is being used to provide direct speech access to a UNIX workstation. The kind of speech access provided by Emacspeak is qual- itatively different from what conventional screen- readers provide -emacspeak makes applications speak- as opposed to speaking the screen.Emacspeak is the first full-fledged speech output system that will allow someone who cannot see to work directly on a UNIX system (Until now, the only option available to visually impaired users has been to use a talking PC as a terminal.) Emacspeak is built on top of Emacs. Once Emacs is started, the user gets complete spoken feedback.I currently use Emacspeak at work on my SUN SparcStation and have also used it on a DECAL- FHA workstation under Digital UNIX while at Di- gital's CRL 1 . I also use Emacspeak as the only speech output system on my laptop running Linux. Emacspeak is available on the Internet:ftp://crl.dec.com/pub/digitallemacspeak/http://www.research.digital.com/CRL},
booktitle = {Proceedings of the Second Annual ACM Conference on Assistive Technologies},
pages = {32–36},
numpages = {5},
keywords = {access to UNIX workstations, direct speech access},
location = {Vancouver, British Columbia, Canada},
series = {Assets '96}
}

%%%%%%%%%%%%%%  Articles published in 1997  %%%%%%%%%%%%%%

@article{HS97,
author = {Holland, Simon and Griffiths, Robert and Woodman, Mark},
title = {Avoiding Object Misconceptions},
year = {1997},
issue_date = {March 1997},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {29},
number = {1},
issn = {0097-8418},
url = {https://doi.org/10.1145/268085.268132},
doi = {10.1145/268085.268132},
abstract = {This paper identifies and describes a number of misconceptions observed in students learning about object technology. It identifies simple, concrete, measures course designers and teachers can take to avoid these misconceptions arising. The context for this work centres on an introductory undergraduate course and a postgraduate course. Both these courses are taught by distance education. These courses both use Smalltalk as an introduction to object technology. More particularly, the undergraduate course uses Smalltalk as a first programming language.Distance education can limit the amount and speed of individual feedback that can be given in the early stages of learning. For this reason, particular attention has been paid to characterizing measures for avoiding elementary misconceptions seen in beginning learners. At the same time we also address some misconceptions observed in postgraduate students. The pedagogical issues discussed are of particular importance when devising an extended series of examples for teaching or assessment, or when designing a visual microworld to be used for teaching purposes.},
journal = {SIGCSE Bull.},
month = {mar},
pages = {131–134},
numpages = {4}
}

@book{FF97:LittleJavaPatterns,
  title={A little Java, a few patterns},
  author={Matthias Felleisen and Daniel P. Friedman},
  year={1997},
  url={https://api.semanticscholar.org/CorpusID:27997877}
}




%%%%%%%%%%%%%%  Articles published in 1998  %%%%%%%%%%%%%%


%%%%%%%%%%%%%%  Articles published in 1999  %%%%%%%%%%%%%%

%% ACM calls this 10.5555/311424, just has 1st edition? from 2018
%%   weirdly, this doesn't have the authors????
%%   See https://www.amazon.com/exec/obidos/ASIN/0201485672/acmorg-20 vs https://www.amazon.com/Refactoring-Improving-Existing-Addison-Wesley-Signature-dp-0134757599/dp/0134757599
%%   IF Fowler doesn't cite the others, maybe I should add them too, in the final version of the paper (see "History" section of that page on Wikipedia for specific theses, etc.)
%%   https://en.wikipedia.org/wiki/Code_refactoring#History
@book{Fowler18:Refactoring,
title = {Refactoring: improving the design of existing code},
author = {Martin Fowler},
year = {2018},
isbn = {0134757599},
publisher = {Addison-Wesley Longman Publishing Co., Inc.},
address = {USA},
}


%%%%%%%%%%%%%%  Articles published in 2000  %%%%%%%%%%%%%%

%TAG: VisuallyImpaired
@inproceedings{10.1145/354324.354356,
author = {Smith, Ann C. and Francioni, Joan M. and Matzek, Sam D.},
title = {A Java Programming Tool for Students with Visual Disabilities},
year = {2000},
isbn = {1581133138},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/354324.354356},
doi = {10.1145/354324.354356},
abstract = {This paper reports on a tool for assisting students with visual disabilities in learning how to program. The tool is meant to be used by computer science majors learning the programming language Java. As part of the developmental process of building this tool, we have implemented a rapid prototype to be used by people with disabilities in order to define appropriate requirements for the full version of the tool. This requires that the prototype is completely usable via a keyboard and speech interface, and it is easily adaptable for trying out different strategies. In this paper, we present the motivation and philosophy of the full tool, called JavaSpeak. We also present the details of a prototype implementation of JavaSpeak.},
booktitle = {Proceedings of the Fourth International ACM Conference on Assistive Technologies},
pages = {142–148},
numpages = {7},
keywords = {students with visual disabilities, Java, programming tool, learning to program},
location = {Arlington, Virginia, USA},
series = {Assets '00}
}

%%%%%%%%%%%%%%  Articles published in 2001  %%%%%%%%%%%%%%


% inproceedings{10.5555/645395.651947,
@inproceedings{CFF01:stepper,
author = {Clements, John and Flatt, Matthew and Felleisen, Matthias},
title = {Modeling an Algebraic Stepper},
year = {2001},
isbn = {3540418628},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
abstract = {Programmers rely on the correctness of the tools in their programming environments. In the past, semanticists have studied the correctness of compilers and compiler analyses, which are the most important tools. In this paper, we make the case that other tools, such as debuggers and steppers, deserve semantic models, too, and that using these models can help in developing these tools.Our concrete starting point is the algebraic stepper in DrScheme, our Scheme programming environment. The algebraic stepper explains a Scheme computation in terms of an algebraic rewriting of the program text. A program is rewritten until it is in a canonical form (if it has one). The canonical form is the final result.The stepper operates within the existing evaluator, by placing breakpoints and by reconstructing source expressions from source information placed on the stack. This approach raises two questions. First, do the run-time breakpoints correspond to the steps of the reduction semantics? Second, does the debugging mechanism insert enough information to reconstruct source expressions?To answer these questions, we develop a high-level semantic model of the extended compiler and run-time machinery. Rather than modeling the evaluation as a low-level machine, we model the relevant low-level features of the stepper's implementation in a high-level reduction semantics. We expect the approach to apply to other semantics-based tools.},
booktitle = {Proceedings of the 10th European Symposium on Programming Languages and Systems},
pages = {320–334},
numpages = {15},
series = {ESOP '01}
}


% TAG: Recursion
@inproceedings{SR:PR,
author = {Sooriamurthi, Raja},
title = {Problems in Comprehending Recursion and Suggested Solutions},
year = {2001},
isbn = {1581133308},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/377435.377458},
doi = {10.1145/377435.377458},
abstract = {Recursion is a very powerful and useful problem solving strategy. But, along with pointers and dynamic data structures, many beginning programmers consider recursion to be a difficult concept to master. This paper reports on a study of upper-division undergraduate students on their difficulty in comprehending the ideas behind recursion. Three issues emerged as the points of difficulty for the students: (1) insufficient exposure to declarative thinking in a programming context (2) inadequate appreciation of the concept of functional abstraction (3) lack of a proper methodology to express a recursive solution. The paper concludes with a discussion of our approach to teaching recursion, which addresses these issues. Classroom experience indicates this approach effectively aids students' comprehension of recursion.},
booktitle = {Proceedings of the 6th Annual Conference on Innovation and Technology in Computer Science Education},
pages = {25–28},
numpages = {4},
location = {Canterbury, United Kingdom},
series = {ITiCSE '01}
}

@article{10.1145/507758.377458,
author = {Sooriamurthi, Raja},
title = {Problems in Comprehending Recursion and Suggested Solutions},
year = {2001},
issue_date = {Sept. 2001},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {33},
number = {3},
issn = {0097-8418},
url = {https://doi.org/10.1145/507758.377458},
doi = {10.1145/507758.377458},
abstract = {Recursion is a very powerful and useful problem solving strategy. But, along with pointers and dynamic data structures, many beginning programmers consider recursion to be a difficult concept to master. This paper reports on a study of upper-division undergraduate students on their difficulty in comprehending the ideas behind recursion. Three issues emerged as the points of difficulty for the students: (1) insufficient exposure to declarative thinking in a programming context (2) inadequate appreciation of the concept of functional abstraction (3) lack of a proper methodology to express a recursive solution. The paper concludes with a discussion of our approach to teaching recursion, which addresses these issues. Classroom experience indicates this approach effectively aids students' comprehension of recursion.},
journal = {SIGCSE Bull.},
month = {jun},
pages = {25–28},
numpages = {4}
}

%%%%%%%%%%%%%%  Articles published in 2002  %%%%%%%%%%%%%%

@article{ASP_Clubhouse,
author = {Fisher, Allan and Margolis, Jane},
title = {Unlocking the Clubhouse: The Carnegie Mellon Experience},
year = {2002},
issue_date = {June 2002},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {34},
number = {2},
issn = {0097-8418},
url = {https://doi.org/10.1145/543812.543836},
doi = {10.1145/543812.543836},
abstract = {In the fall of 1995, just seven of 95 students entering the undergraduate program in computer science at Carnegie Mellon University were women. In 2000, 54 of 130, or 42\%, were women. What happened? This article presents a brief history of the transformation at Carnegie Mellon's School of Computer Science, and the research project that lay behind it. A fuller discussion, set in an analysis of gender issues in computing from childhood through college, is found in our book, Unlocking the Clubhouse: Women in Computing [2].The story begins with a research study designed specifically to diagnose and find remedies for the gender gap in Carnegie Mellon's undergraduate computer science program. Female enrollment had hovered below 10\% for a number of years, and the fraction of women leaving the program was approximately twice that for men. In 1995, the Alfred P. Sloan Foundation funded our proposal for a two-year program, which was followed up two years later with a two-year extension. The goal was to understand the experiences and choices of both men and women with respect to studying computer science, and to design interventions that would involve more women.},
journal = {SIGCSE Bull.},
month = {jun},
pages = {79–83},
numpages = {5}
}

%TAG: VisuallyImpaired
@article{10.1145/563517.563372,
author = {Francioni, Joan M. and Smith, Ann C.},
title = {Computer Science Accessibility for Students with Visual Disabilities},
year = {2002},
issue_date = {March 2002},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {34},
number = {1},
issn = {0097-8418},
url = {https://doi.org/10.1145/563517.563372},
doi = {10.1145/563517.563372},
abstract = {Students with visual disabilities face unique challenges in learning to be computer scientists. These challenges can be overcome, however, with the use of specialized software tools and hardware equipment, collectively called assistive technology. In this paper, we discuss the environment we are using for three students with visual disabilities who are starting in our programs this year. This environment includes a collection of commercial assistive technology and a programming tool that we have developed in-house.},
journal = {SIGCSE Bull.},
month = {feb},
pages = {91–95},
numpages = {5}
}

@article{Bea02:WhyMath,
    author  = "Theresa Beaubouef",
    title   = "Why Computer Science Students Need Math",
    year    = "2002",
    journal = "SIGCSE Bulletin (inroads)",
    volume  = "34",
    number  = "4",
    pages   = "57--59"
}

%%%%%%%%%%%%%%  Articles published in 2003  %%%%%%%%%%%%%%


% TAG: Recursion
@inproceedings{GSG:Recursion03,
author = {G\"{o}tschi, Tina and Sanders, Ian and Galpin, Vashti},
title = {Mental Models of Recursion},
year = {2003},
isbn = {158113648X},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/611892.612004},
doi = {10.1145/611892.612004},
abstract = {Recursion is a fundamental concept in Computer Science. A student's knowledge of recursion
can be termed their mental model of recursion. A student's mental model is viable
if it allows them to accurately and consistently represent the mechanics of recursion.
Non-viable mental models are constructed if students have misconceptions about the
mechanisms of recursion or have misconceptions about concepts fundamental to recursion.
This paper presents a study of the mental models of recursion that first year students
at the University of the Witwatersrand have constructed in 2000, 2001 and 2002. It
was found that while the majority of students constructed the viable copies model,
many non-viable models such as the looping, active, step, magic, return-value and
various odd models were also constructed. Identifying the models that students have
can allow lecturers to target individual students' specific problems and analysis
of the models can provide insight into learning.},
booktitle = {Proceedings of the 34th SIGCSE Technical Symposium on Computer Science Education},
pages = {346–350},
numpages = {5},
keywords = {recursion, pedagogy, programming, mental models, learning, constructivism},
location = {Reno, Navada, USA},
series = {SIGCSE '03}
}


% TAG: Recursion
% TAG: Structural Recursion, Specific Empty Objects rather than Universal Null
% ACM tag 
@article{Bloch:OORecursion03,
author = {Bloch, Stephen},
title = {Teaching Linked Lists and Recursion without Conditionals or Null},
year = {2003},
issue_date = {May 2003},
publisher = {Consortium for Computing Sciences in Colleges},
address = {Evansville, IN, USA},
doi = {10.5555/771832.771849},
url = {https://dl.acm.org/doi/10.5555/771832.771849},
volume = {18},
number = {5},
issn = {1937-4771},
abstract = {We describe a natural and principled approach to teaching linked data structures and recursion in CS0, CS1 or CS2, and compare the difficulty of using this approach in C++, Java, and Scheme.},
journal = {J. Comput. Sci. Coll.},
month = {may},
pages = {96–108},
numpages = {13}
}

% TAG: CS_ED K-12
@article{ASP:PBL_2,
author = {Frank, Moti and Lavy, Ilana and Elata, David},
year = {2003},
month = {10},
pages = {273-288},
title = {Implementing the Project-Based Learning Approach in an Academic Engineering Course},
volume = {13},
journal = {International Journal of Technology and Design Education},
doi = {10.1023/A:1026192113732}
}

%TAG: VisuallyImpaired
@inproceedings{10.1145/1028630.1028654,
author = {Smith, Ann C. and Cook, Justin S. and Francioni, Joan M. and Hossain, Asif and Anwar, Mohd and Rahman, M. Fayezur},
title = {Nonvisual Tool for Navigating Hierarchical Structures},
year = {2003},
isbn = {158113911X},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1028630.1028654},
doi = {10.1145/1028630.1028654},
abstract = {The hierarchical structure of a program can be quite complex. As such, many Integrated Development Environments (IDEs) provide graphical representations of program structure at different levels of abstraction. Such representations are not very accessible to non-sighted programmers, as screen readers are not able to portray the underlying hierarchical structure of the information. In this paper, we define a set of requirements for an accessible tree navigation strategy. An implementation of this strategy was developed as a plug-in to the Eclipse IDE and was tested by twelve student programmers. The evaluation of the tool shows the strategy to be an efficient and effective way for a non-sighted programmer to navigate hierarchical structures.},
booktitle = {Proceedings of the 6th International ACM SIGACCESS Conference on Computers and Accessibility},
pages = {133–139},
numpages = {7},
keywords = {hierarchical structures, navigation, java programmers},
location = {Atlanta, GA, USA},
series = {Assets '04}
}

%%%%%%%%%%%%%%  Articles published in 2004  %%%%%%%%%%%%%%


% we had listed here article{10.1145/792548.612004,
% though the year was 2003, and it's a copy of GSG:Recursion03 above :-(


@article{TJ04:Python,
author = {Tony Jenkins},
title = {The First Language - A Case for Python?},
journal = {Innovation in Teaching and Learning in Information and Computer Sciences},
volume = {3},
number = {2},
pages = {1-9},
year  = {2004},
publisher = {Routledge},
doi = {10.11120/ital.2004.03020004},

URL = {https://doi.org/10.11120/ital.2004.03020004},
eprint = {https://doi.org/10.11120/ital.2004.03020004}
}

%%%%%%%%%%%%%%  Articles published in 2005  %%%%%%%%%%%%%%

% inproceedings{10.1145/1047344.1047431,
@inproceedings{DW05:3-2-1,
author = {Dougherty, John P. and Wonnacott, David G.},
title = {Use and Assessment of a Rigorous Approach to CS1},
year = {2005},
isbn = {1581139977},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1047344.1047431},
doi = {10.1145/1047344.1047431},
abstract = {We have developed and implemented a "rigor-first" approach to CS1 instruction, in which we introduce rigorous techniques for understanding algorithms alongside associated programming skills. This core material is developed through a number of engaging problems from more advanced courses in computer science and other natural sciences. These principles are continued in CS2, and the two courses form our "3-2-1" first-year sequence: three programming paradigms and two models of program execution are explored on a single platform. This article discusses the design of our CS1 course, its role in the computer science curriculum, and our experiences with it. Preliminary assessment suggests this approach has merit in our curriculum.},
booktitle = {Proceedings of the 36th SIGCSE Technical Symposium on Computer Science Education},
pages = {251–255},
numpages = {5},
keywords = {verification, gender, CS1, rigor, recursion, pedagogy, multi-paradigm},
location = {St. Louis, Missouri, USA},
series = {SIGCSE '05}
}


% ACM calls this 10.1145/1047344.1047430
@inproceedings{BDM05:StructuralRecursion,
author = {Bruce, Kim B. and Danyluk, Andrea and Murtagh, Thomas},
title = {Why structural recursion should be taught before arrays in CS 1},
year = {2005},
isbn = {1581139977},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1047344.1047430},
doi = {10.1145/1047344.1047430},
abstract = {The approach to teaching recursion in introductory programming courses has changed little during the transition from procedural to object-oriented languages. It is still common to present recursion late in the course and to focus on traditional, procedural examples such as calculating factorials or solving the Towers of Hanoi puzzle. In this paper, we propose that the shift to object-oriented programming techniques calls for a significant shift in our approach to teaching recursion. First, we argue that in the context of object-oriented programming students should be introduced to examples of simple recursive structures such as linked lists and methods that process them, before being introduced to traditional procedural examples. Second, we believe that this material should be presented before students are introduced to structures such as arrays. In our experience, the early presentation of recursive structures provides the opportunity to reinforce the fundamentals of defining and using classes and better prepares students to appreciate the reasons to use classes to encapsulate access to other data structures when they are presented.},
booktitle = {Proceedings of the 36th SIGCSE Technical Symposium on Computer Science Education},
pages = {246–250},
numpages = {5},
keywords = {recursion, CS1},
location = {St. Louis, Missouri, USA},
series = {SIGCSE '05}
}

@article{10.1145/1047124.1047430,
author = {Bruce, Kim B. and Danyluk, Andrea and Murtagh, Thomas},
title = {Why structural recursion should be taught before arrays in CS 1},
year = {2005},
issue_date = {2005},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {37},
number = {1},
issn = {0097-8418},
url = {https://doi.org/10.1145/1047124.1047430},
doi = {10.1145/1047124.1047430},
abstract = {The approach to teaching recursion in introductory programming courses has changed little during the transition from procedural to object-oriented languages. It is still common to present recursion late in the course and to focus on traditional, procedural examples such as calculating factorials or solving the Towers of Hanoi puzzle. In this paper, we propose that the shift to object-oriented programming techniques calls for a significant shift in our approach to teaching recursion. First, we argue that in the context of object-oriented programming students should be introduced to examples of simple recursive structures such as linked lists and methods that process them, before being introduced to traditional procedural examples. Second, we believe that this material should be presented before students are introduced to structures such as arrays. In our experience, the early presentation of recursive structures provides the opportunity to reinforce the fundamentals of defining and using classes and better prepares students to appreciate the reasons to use classes to encapsulate access to other data structures when they are presented.},
journal = {SIGCSE Bull.},
month = {feb},
pages = {246–250},
numpages = {5},
keywords = {recursion, CS1}
}



@article{RB05,
author = {Ragonis, Noa and Ben-Ari, Mordechai},
year = {2005},
month = {09},
title = {A long-term investigation of the comprehension of OOP concepts by novices},
volume = {15},
journal = {Computer Science Education},
doi = {10.1080/08993400500224310}
}

@article{ET05,
author = {Eckerdal, Anna and Thun\'{e}, Michael},
title = {Novice Java Programmers' Conceptions of "Object" and "Class", and Variation Theory},
year = {2005},
issue_date = {September 2005},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {37},
number = {3},
issn = {0097-8418},
url = {https://doi.org/10.1145/1151954.1067473},
doi = {10.1145/1151954.1067473},
abstract = {Problems with understanding concepts, so called misconceptions, have been investigated and reported in a number of studies regarding object-oriented programming [4], [3]. In a first programming course using an object-oriented language, it is of great importance that students get a good understanding of central concepts like object and class at an early stage of their education. We have, with a phenomenographic research approach, performed a study with first year university students, investigating what an understanding of the concepts object and class includes from a student perspective. By applying variation theory [8] to our results we are able to pin-point what the students need to be able to discern in order to gain a "rich" understanding of these concepts.},
journal = {SIGCSE Bull.},
month = {jun},
pages = {89–93},
numpages = {5},
keywords = {conceptions, phenomenography, misconceptions, variation theory}
}

%%%%%%%%%%%%%%  Articles published in 2006  %%%%%%%%%%%%%%

% inproceedings{10.1145/1140124.1140162,
@inproceedings{SGG06:RecursionModels2,
author = {Sanders, Ian and Galpin, Vashti and G\"{o}tschi, Tina},
title = {Mental Models of Recursion Revisited},
year = {2006},
isbn = {1595930558},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1140124.1140162},
doi = {10.1145/1140124.1140162},
abstract = {Students struggle to understand recursion and we need to find good ways to teach the concept. We believe that an understanding of the mental models of recursion that students develop will assist us in teaching them more effectively. In 2003 we reported on a study of the mental models our students developed. This paper discusses some changes that we made to our teaching in 2003 after that study. An analysis of the students' mental models in 2003, 2004 and 2005 shows that more students are developing the copies model of recursion which is always a viable model.},
booktitle = {Proceedings of the 11th Annual SIGCSE Conference on Innovation and Technology in Computer Science Education},
pages = {138–142},
numpages = {5},
keywords = {mental models, recursion},
location = {Bologna, Italy},
series = {ITICSE '06}
}

  

@article{10.1145/1140123.1140162,
author = {Sanders, Ian and Galpin, Vashti and G\"{o}tschi, Tina},
title = {Mental Models of Recursion Revisited},
year = {2006},
issue_date = {September 2006},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {38},
number = {3},
issn = {0097-8418},
url = {https://doi.org/10.1145/1140123.1140162},
doi = {10.1145/1140123.1140162},
abstract = {Students struggle to understand recursion and we need to find good ways to teach the concept. We believe that an understanding of the mental models of recursion that students develop will assist us in teaching them more effectively. In 2003 we reported on a study of the mental models our students developed. This paper discusses some changes that we made to our teaching in 2003 after that study. An analysis of the students' mental models in 2003, 2004 and 2005 shows that more students are developing the copies model of recursion which is always a viable model.},
journal = {SIGCSE Bull.},
month = {jun},
pages = {138–142},
numpages = {5},
keywords = {recursion, mental models}
}

@inproceedings{TH06,
author = {Teif, Mariana and Hazzan, Orit},
year = {2006},
month = {12},
pages = {55},
title = {Partonomy and taxonomy in object-oriented thinking},
volume = {38},
isbn = {1595936033},
journal = {ACM SIGCSE Bulletin},
doi = {10.1145/1189215.1189170}
}

@article{TH06,
author = {Teif, Mariana and Hazzan, Orit},
title = {Partonomy and Taxonomy in Object-Oriented Thinking: Junior High School Students' Perceptions of Object-Oriented Basic Concepts},
year = {2006},
issue_date = {December 2006},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {38},
number = {4},
issn = {0097-8418},
url = {https://doi.org/10.1145/1189136.1189170},
doi = {10.1145/1189136.1189170},
abstract = {The study presented in this paper explores junior high school students' comprehension of basic OO concepts. It summarizes major (mis)conceptions demonstrated by the students in two main categories: confusion of (1) taxonomic and (2) partonomic hierarchies with classes, objects and their interrelations.},
journal = {SIGCSE Bull.},
month = {jun},
pages = {55–60},
numpages = {6},
keywords = {junior high school students' perceptions, object-oriented programming, taxonomy, partonomy}
}


@article{TB06,
author = {Thomasson, Benjy and Ratcliffe, Mark and Thomas, Lynda},
title = {Identifying Novice Difficulties in Object Oriented Design},
year = {2006},
issue_date = {September 2006},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {38},
number = {3},
issn = {0097-8418},
url = {https://doi.org/10.1145/1140123.1140135},
doi = {10.1145/1140123.1140135},
abstract = {We report on a study of novice programmers' object oriented class designs. These designs were analysed to discover what faults they displayed. The two most common faults related to non-referenced classes (inability to integrate them into the solution), and problems with attributes and class cohesion. The paper ends with some implication for teaching that may be indicated by the empirical results.},
journal = {SIGCSE Bull.},
month = {jun},
pages = {28–32},
numpages = {5},
keywords = {introductory programming, design, design faults, software design}
}

@inproceedings{PK06:drop,
author = {Kinnunen, P\"{a}ivi and Malmi, Lauri},
title = {Why Students Drop out CS1 Course?},
year = {2006},
isbn = {1595934944},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1151588.1151604},
doi = {10.1145/1151588.1151604},
abstract = {This study focuses on CS minor students' decisions to drop out from the CS1 course. The high level of drop out percentage has been a problem at Helsinki University of Technology for many years. This course has yearly enrolment of 500-600 students and the drop out percentage has varied from 30-50 percents.Since we did not have clear picture of drop out reasons we conducted a qualitative interview research in which 18 dropouts from the CS1 course were interviewed. The reasons of drop out were categorized and, in addition, each case was investigated individually. This procedure enabled us to both list the reasons and to reveal the cumulative nature of drop out reasons.The results indicate that several reasons affect students' decision to quit the CS1 course. The most frequent reasons were the lack of time and the lack of motivation. However, both of these reasons were in turn affected by factors, such as the perceived difficulty of the course, general difficulties with time managing and planning studies, or the decision to prefer something else. Furthermore, low comfort level and plagiarism played a role in drop out. In addition, drop out reasons cumulated.This study shows that the complexity and large variety of factors involved in students' decision to drop the course. This indicates that simple actions to improve teaching or organization on a CS1 course to reduce drop out may be ineffective. Efficient intervention to the problem apparently requires a combination of many different actions that take into consideration the versatile nature of reasons involved in drop out.},
booktitle = {Proceedings of the Second International Workshop on Computing Education Research},
pages = {97–108},
numpages = {12},
keywords = {drop out reasons, non-major CS students, CS1},
location = {Canterbury, United Kingdom},
series = {ICER '06}
}

%%%%%%%%%%%%%%  Articles published in 2007  %%%%%%%%%%%%%%

@article{Sigman07:EngagingTheory,
    author  = "Scott Sigman",
    title   = "Engaging Students in Formal Language Theory and Theory of Computation",
    year    = "2007",
    journal = "Proceedings of the 38th SIGCSE Technical Symposium on Computer Science Education",
    pages   = "450--453"
}

@article{ST07,
author = {Sanders, Kate and Thomas, Lynda},
title = {Checklists for Grading Object-Oriented CS1 Programs: Concepts and Misconceptions},
year = {2007},
issue_date = {September 2007},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {39},
number = {3},
issn = {0097-8418},
url = {https://doi.org/10.1145/1269900.1268834},
doi = {10.1145/1269900.1268834},
abstract = {In this paper, we begin by considering object-oriented programming concepts and typical novice misconceptions as identified in the literature. We then present the results of a close examination of student programs, in an objects-first CS1 course, in which we find concrete evidence of students learning these concepts while also displaying some of these misconceptions. This leads to the development of two checklists that educators can use when designing or grading student programs.},
journal = {SIGCSE Bull.},
month = {jun},
pages = {166–170},
numpages = {5},
keywords = {assessment, misconceptions, CS1, empirical research, object-oriented concepts}
}

%%%%%%%%%%%%%%  Articles published in 2008  %%%%%%%%%%%%%%

%TAG: VisuallyImpaired
@inproceedings{10.1145/1352135.1352287,
author = {Bigham, Jeffrey P. and Aller, Maxwell B. and Brudvik, Jeremy T. and Leung, Jessica O. and Yazzolino, Lindsay A. and Ladner, Richard E.},
title = {Inspiring Blind High School Students to Pursue Computer Science with Instant Messaging Chatbots},
year = {2008},
isbn = {9781595937995},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1352135.1352287},
doi = {10.1145/1352135.1352287},
abstract = {Blind students are an underrepresented group in computer science. In this paper, we describe our experience preparing and leading the computer science track at the National Federation of the Blind Youth Slam. As part of this workshop, fifteen blind high school students created and personalized instant messaging chatbots, a project designed to be completely accessible to blind students. Chatbots enable students to infuse their own personalities into a socially-oriented program that incorporates ideas from artificial intelligence, natural language processing, and web services. We first outline the chatbots project and curriculum, which has wide appeal for all students, and then offer general design principles used to create it that can help ensure the accessibility of future projects. Students created their chatbots using a real programming language and were guided by both blind and sighted mentors. By programming from the start in a supportive environment, our students will gain the confidence to persevere in computer science in the future.},
booktitle = {Proceedings of the 39th SIGCSE Technical Symposium on Computer Science Education},
pages = {449–453},
numpages = {5},
keywords = {chatbots, accessibility, blind students},
location = {Portland, OR, USA},
series = {SIGCSE '08}
}

@article{SJ08,
author = {Sajaniemi, Jorma and Kuittinen, Marja and Tikansalo, Taina},
title = {A Study of the Development of Students' Visualizations of Program State during an Elementary Object-Oriented Programming Course},
year = {2008},
issue_date = {January 2008},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {7},
number = {4},
issn = {1531-4278},
url = {https://doi.org/10.1145/1316450.1316453},
doi = {10.1145/1316450.1316453},
abstract = {Students' understanding of object-oriented (OO) program execution was studied by asking students to draw a picture of a program state at a specific moment. Students were given minimal instructions on what to include in their drawings in order to see what they considered to be central concepts and relationships in program execution. Three drawing tasks were given at different phases of an elementary OO programming course where two animation tools were used for program visualization. The drawings were analyzed for their overall approaches and their detailed contents.There was a large variability in the overall approaches and the popularity of various approaches changed during the course. The results indicate that students' mental representations of OO concepts and program execution not only grow as new material is covered in teaching, but they also change. The first drawings treat methods as having primarily a static existence; later methods are seen as dynamic invocations that call each other. The role of classes in program execution fluctuates during learning, indicating problems in locating the notion of class with respect to, for example, objects. Two major sources of problems that manifested in many different forms were the relationship between object and method, and the role of the main method with respect to program state. Other problems were caused by overly simplistic understanding of object identification and improper use of application domain knowledge.},
journal = {J. Educ. Resour. Comput.},
month = {jan},
articleno = {3},
numpages = {31},
keywords = {CS1/2, object-oriented programming, visualization, mental representation, program state}
}


@article{SB08,
author = {Sanders, Kate and Boustedt, Jonas and Eckerdal, Anna and McCartney, Robert and Mostr\"{o}m, Jan Erik and Thomas, Lynda and Zander, Carol},
title = {Student Understanding of Object-Oriented Programming as Expressed in Concept Maps},
year = {2008},
issue_date = {March 2008},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {40},
number = {1},
issn = {0097-8418},
url = {https://doi.org/10.1145/1352322.1352251},
doi = {10.1145/1352322.1352251},
abstract = {In this paper, we present the results of an experiment in which we sought to elicit students' understanding of object-oriented (OO) concepts using concept maps. Our analysis confirmed earlier research indicating that students do not have a firm grasp on the distinction between "class" and "instance." Unlike earlier research, we found that our students generally connect classes with both data and behavior. Students rarely included any mention of the hardware/software context of programs, their users, or their real-world domains. Students do mention inheritance, but not encapsulation or abstraction. And the picture they draw of OO is a static one: we found nothing that could be construed as referring to interaction among objects in a program. We then discuss the implications for teaching introductory OO programming.},
journal = {SIGCSE Bull.},
month = {mar},
pages = {332–336},
numpages = {5},
keywords = {concept maps, cs1, empirical research, object-oriented}
}

%%%%%%%%%%%%%%  Articles published in 2009  %%%%%%%%%%%%%%

@article{RE09:Prep,
author = {Enbody, Richard J. and Punch, William F. and McCullen, Mark},
title = {Python CS1 as Preparation for C++ CS2},
year = {2009},
issue_date = {March 2009},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {41},
number = {1},
issn = {0097-8418},
url = {https://doi.org/10.1145/1539024.1508907},
doi = {10.1145/1539024.1508907},
abstract = {How suitable is a Python-based CS1 course as preparation for a C++-based CS2 course?
After fifteen years of using C++ for both CS1 and CS2, the Computer Science Department
at Michigan State University changed the CS1 course to Python. This paper examines
the impact of that change on the second course in the sequence, CS2, which kept C++
as its primary language. We report results on a CS2 class which had a mixture of students
who had used either C++ or Python from our CS1 course. The CS2 class covered the same
topics as previously, though with some changes, and even gave the same final exam
as a previous offering. Independent samples t-tests were used to compare students
from the Python group with students from the non-Python group on three outcomes: final
exam grade, programming projects scores, and final grade for the course. The main
result was that there were no significant differences between the groups for all three
outcomes. In addition, multiple regression analysis showed that students' past performance
(overall GPA) in the University predicted final grades, final exam scores, and programming
project scores for the course, but there was no effect of the programming language
feature: Python or non-Python. We feel this shows that the Python-based CS1 course
prepared students for the C++-based CS2 course as well as the C++-based CS1 course
did---while exposing them to a different, powerful and useful language.},
journal = {SIGCSE Bull.},
month = mar,
pages = {116–120},
numpages = {5},
keywords = {curriculum, intro. to programming, python, cs1, cs2}
}

%%%%%%%%%%%%%%  Articles published in 2010  %%%%%%%%%%%%%%

@article{Pillay10:LearningFLAT,
    author  = "Nelishia Pillay",
    title   = "Learning difficulties experienced by students in a course on formal languages and automata theory",
    year    = "2010",
    journal = "ACM SIGCSE Bulletin, 41(4)",
    pages   = "48--52"
}

@inproceedings{RE10:PythonNon,
author = {Enbody, Richard J. and Punch, William F.},
title = {Performance of Python CS1 Students in Mid-Level Non-Python CS Courses},
year = {2010},
isbn = {9781450300063},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1734263.1734437},
doi = {10.1145/1734263.1734437},
abstract = {If you change the CS1 language to Python, what is the impact on the rest of the curriculum?
In earlier work we examined the impact of changing CS1 from C++ to Python while leaving
CS2 in C++. We found that Python-prepared CS1 students fared no differently in CS2
than students whose CS1 course was in C++, even though CS2 was taught in C++ and covered
the same topics as in previous years. Was that an anomaly? What happens in the next
tier of courses? When our CS1 was first changed to Python there were many students
who had taken CS1 in C++ still in the system. The result is that there is a cadre
of students with either CS1 in Python or CS1 in C++ moving together through our curriculum.
This one-time occurrence is an opportunity to study the students with many variables
fixed. Our next tier of courses is a C-based computer organization course, a C++ based
object-oriented software design course, and a data structures course. We found that
the students who started with Python fared as well as the CS1 C++ students. As before,
the best predictor of performance was their college GPA. Python versus C++ CS1 preparation
was not a predictor of performance in any course. We conclude again that in our C++
based curriculum changing CS1 to Python had no negative impact on student performance
and did not require any significant change in those subsequent courses.},
booktitle = {Proceedings of the 41st ACM Technical Symposium on Computer Science Education},
pages = {520–523},
numpages = {4},
keywords = {cs1, introduction to programming, curriculum, python},
location = {Milwaukee, Wisconsin, USA},
series = {SIGCSE '10}
}


% had accidentally been TI:MM10,
@inproceedings{SS10:ModelsRec,
author = {Scholtz, Tamarisk Lurlyn and Sanders, Ian},
title = {Mental Models of Recursion: Investigating Students' Understanding of Recursion},
year = {2010},
isbn = {9781605588209},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1822090.1822120},
doi = {10.1145/1822090.1822120},
abstract = {Mental models of recursion provide some idea into a student's understanding of recursion. However there has been concern regarding whether viable trace mental models of recursion show students' true understanding of recursion. We have conducted an investigation to further examine the understanding of recursion of students with viable trace mental models. The investigation looked at students' understanding of the termination of a recursive function, their descriptive mental models and their ability to generate a recursive function. This research provides evidence to show that trace methods are essentially mechanical processes that can allow students with little understanding of recursion to correctly evaluate a recursive function but that students do not fully understand recursion and in particular have difficulties with the passive flow. Based on the results of the study, this paper discusses possible changes that can be made to our teaching in order to more eectively teach recursion to first year students.},
booktitle = {Proceedings of the Fifteenth Annual Conference on Innovation and Technology in Computer Science Education},
pages = {103–107},
numpages = {5},
keywords = {mental models, recursion},
location = {Bilkent, Ankara, Turkey},
series = {ITiCSE '10}
}

@article{10.1145/1932682.1869462,
author = {Hanenberg, Stefan},
title = {An Experiment about Static and Dynamic Type Systems: Doubts about the Positive Impact of Static Type Systems on Development Time},
year = {2010},
issue_date = {October 2010},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {45},
number = {10},
issn = {0362-1340},
url = {https://doi.org/10.1145/1932682.1869462},
doi = {10.1145/1932682.1869462},
abstract = {Although static type systems are an essential part in teach-ing and research in software engineering and computer science, there is hardly any knowledge about what the impact of static type systems on the development time or the resulting quality for a piece of software is. On the one hand there are authors that state that static type systems decrease an application's complexity and hence its development time (which means that the quality must be improved since developers have more time left in their projects). On the other hand there are authors that argue that static type systems increase development time (and hence decrease the code quality) since they restrict developers to express themselves in a desired way. This paper presents an empirical study with 49 subjects that studies the impact of a static type system for the development of a parser over 27 hours working time. In the experiments the existence of the static type system has neither a positive nor a negative impact on an application's development time (under the conditions of the experiment).},
journal = {SIGPLAN Not.},
month = {oct},
pages = {22–35},
numpages = {14},
keywords = {programming languages, type systems, dynamically typed languages, empirical study}
}

@inproceedings{ASP_Types_3,
author = {Hanenberg, Stefan},
title = {An Experiment about Static and Dynamic Type Systems: Doubts about the Positive Impact of Static Type Systems on Development Time},
year = {2010},
isbn = {9781450302036},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1869459.1869462},
doi = {10.1145/1869459.1869462},
abstract = {Although static type systems are an essential part in teach-ing and research in software engineering and computer science, there is hardly any knowledge about what the impact of static type systems on the development time or the resulting quality for a piece of software is. On the one hand there are authors that state that static type systems decrease an application's complexity and hence its development time (which means that the quality must be improved since developers have more time left in their projects). On the other hand there are authors that argue that static type systems increase development time (and hence decrease the code quality) since they restrict developers to express themselves in a desired way. This paper presents an empirical study with 49 subjects that studies the impact of a static type system for the development of a parser over 27 hours working time. In the experiments the existence of the static type system has neither a positive nor a negative impact on an application's development time (under the conditions of the experiment).},
booktitle = {Proceedings of the ACM International Conference on Object Oriented Programming Systems Languages and Applications},
pages = {22–35},
numpages = {14},
keywords = {empirical study, dynamically typed languages, type systems, programming languages},
location = {Reno/Tahoe, Nevada, USA},
series = {OOPSLA '10}
}




%%%%%%%%%%%%%%  Articles published in 2011  %%%%%%%%%%%%%%

%TAG: VisuallyImpaired 
@inproceedings{10.1145/1953163.1953323,
author = {Stefik, Andreas M. and Hundhausen, Christopher and Smith, Derrick},
title = {On the Design of an Educational Infrastructure for the Blind and Visually Impaired in Computer Science},
year = {2011},
isbn = {9781450305006},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1953163.1953323},
doi = {10.1145/1953163.1953323},
abstract = {The blind and visually impaired community is significantly underrepresented in computer science. Students who wish to enter the discipline must overcome significant technological and educational barriers to succeed. In an attempt to help this population, we are engaged in a three-year research project to build an educational infrastructure for blind and visually impaired middle and high school students. Our primary research goal is to begin forging a multi-sensory educational infrastructure for the blind across the United States. We present here two preliminary results from this research: 1) a new auditory programming environment called Sodbeans, a programming language called Hop, and a multi-sensory (sound and touch) curriculum, and 2) an empirical study of our first summer workshop with the blind students. Results show that students reported a significant increase in programming self-efficacy after participating in our camp.},
booktitle = {Proceedings of the 42nd ACM Technical Symposium on Computer Science Education},
pages = {571–576},
numpages = {6},
keywords = {auditory debugging, assistive technology, visual impairments, accessibility},
location = {Dallas, TX, USA},
series = {SIGCSE '11}
}

% TAG: ExperimentalDesign
% ACM short-name 10.1145/2016911.2016919,
% but I want a "short name" I can remember, e.g., authors initials, one word, publication year, like so:
@inproceedings{FTR:Design11,
author = {Fincher, Sally and Tenenberg, Josh and Robins, Anthony},
title = {Research Design: Necessary Bricolage},
year = {2011},
isbn = {9781450308298},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2016911.2016919},
doi = {10.1145/2016911.2016919},
abstract = {In this paper we suggest that in order to advance, the field of computer science education
needs to craft its own research methods, to augment the borrowing of "traditional"
methods such as semi-structured interviews and surveys from other research traditions.
Two example instruments used in our recent research are discussed. We adopt the metaphor
of "bricolage" to characterise not only what researchers do, but to argue that this
may be a necessary step towards developing theory.},
booktitle = {Proceedings of the Seventh International Workshop on Computing Education Research},
pages = {27–32},
numpages = {6},
keywords = {bricolage, research methods, research design},
location = {Providence, Rhode Island, USA},
series = {ICER '11}
}



%%%%%%%%%%%%%%  Articles published in 2013  %%%%%%%%%%%%%%


% ACM version: 10.1145/2445196.2445368
@inproceedings{Guo13:PythonTutor,
author = {Guo, Philip J.},
title = {Online python tutor: embeddable web-based program visualization for cs education},
year = {2013},
isbn = {9781450318686},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2445196.2445368},
doi = {10.1145/2445196.2445368},
abstract = {This paper presents Online Python Tutor, a web-based program visualization tool for Python, which is becoming a popular language for teaching introductory CS courses. Using this tool, teachers and students can write Python programs directly in the web browser (without installing any plugins), step forwards and backwards through execution to view the run-time state of data structures, and share their program visualizations on the web. In the past three years, over 200,000 people have used Online Python Tutor to visualize their programs. In addition, instructors in a dozen universities such as UC Berkeley, MIT, the University of Washington, and the University of Waterloo have used it in their CS1 courses. Finally, Online Python Tutor visualizations have been embedded within three web-based digital Python textbook projects, which collectively attract around 16,000 viewers per month and are being used in at least 25 universities. Online Python Tutor is free and open source software, available at pythontutor.com.},
booktitle = {Proceeding of the 44th ACM Technical Symposium on Computer Science Education},
pages = {579–584},
numpages = {6},
keywords = {CS1, program visualization, python},
location = {Denver, Colorado, USA},
series = {SIGCSE '13}
}


%%%% WAS: JS13:N
@article{Sorva13:Notional,
author = {Sorva, Juha},
title = {Notional Machines and Introductory Programming Education},
year = {2013},
issue_date = {June 2013},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {2},
url = {https://doi.org/10.1145/2483710.2483713},
doi = {10.1145/2483710.2483713},
abstract = {This article brings together, summarizes, and comments on several threads of research
that have contributed to our understanding of the challenges that novice programmers
face when learning about the runtime dynamics of programs and the role of the computer
in program execution. More specifically, the review covers the literature on programming
misconceptions, the cognitive theory of mental models, constructivist theory of knowledge
and learning, phenomenographic research on experiencing programming, and the theory
of threshold concepts. These bodies of work are examined in relation to the concept
of a “notional machine”—an abstract computer for executing programs of a particular
kind. As a whole, the literature points to notional machines as a major challenge
in introductory programming education. It is argued that instructors should acknowledge
the notional machine as an explicit learning objective and address it in teaching.
Teaching within some programming paradigms, such as object-oriented programming, may
benefit from using multiple notional machines at different levels of abstraction.
Pointers to some promising pedagogical techniques are provided.},
journal = {ACM Trans. Comput. Educ.},
month = jul,
articleno = {8},
numpages = {31},
keywords = {Notional machine, misconceptions, constructivism, phenomenography, literature review, introductory programming education, CS1, threshold concepts, mental models}
}


%%%%%%%%%%%%%%  Articles published in 2014  %%%%%%%%%%%%%%

@article{Lewis14:Recursion,
    author  = "Colleen Lewis",
    title   = "Exploring variation in students’ correct traces of linear recursion",
    year    = "2014",
    journal = "Proceedings of the Tenth Annual Conference on International Computing Education",
    pages   = "67--74"
}

@article{SM14:ConceptsInduction,
    author  = "Thérèse Smith and Robert McCartney",
    title   = "Computer Science Students’ Concepts of Proof by Induction",
    year    = "2014",
    journal = " Proceedings of the 14th Koli Calling International Conference on Computing Education Research",
    pages   = "51--60"
}

@inproceedings{RB14:lowlevel,
author = {Balasubramanian, Raghuraman and York, Zachary and Doran, Matthew and Biswas, Aritra and Girgin, Timur and Sankaralingam, Karthikeyan},
title = {Hands-on Introduction to Computer Science at the Freshman Level},
year = {2014},
isbn = {9781450326056},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2538862.2538889},
doi = {10.1145/2538862.2538889},
abstract = {This paper details the creation of a hands-on introduction course that reflects the
dramatic growth and diversity in computer science. Our aim was to enable students
to get an end-to-end perspective on computer system design by building one. We report
on a two-year exercise in using the Arduino platform to build a series of hands-on
projects. We have used these projects in two course instances, and have obtained detailed
student feedback, which we analyze and present in this paper. The instructions, code
and videos developed are available open-source.},
booktitle = {Proceedings of the 45th ACM Technical Symposium on Computer Science Education},
pages = {235–240},
numpages = {6},
keywords = {pedagogy, introduction to computer science, hands-on projects},
location = {Atlanta, Georgia, USA},
series = {SIGCSE '14},
}

@misc{PG14:PythonPopular,
	title = {Python {Is} {Now} the {Most} {Popular} {Introductory} {Teaching} {Language} at {Top} ­{U}.{S}. ­{Universities}},
	url = {https://cacm.acm.org/blogs/blog-cacm/176450-python-is-now-the-most-popular-introductory-teaching-language-at-top-us-universities/fulltext},
	year={2014},
	abstract = {Eight of the top 10 CS departments in the U.S., and {\textasciitilde}70\% of the top 40, teach Python in introductory courses.},
	language = {en},
	urldate = {2021-10-29},
	author = {Guo, Philip},
}

@article{10.1145/2632036,
author = {Guzdial, Mark},
title = {Why the U.S. is Not Ready for Mandatory CS Education},
year = {2014},
issue_date = {August 2014},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {57},
number = {8},
issn = {0001-0782},
url = {https://doi.org/10.1145/2632036},
doi = {10.1145/2632036},
abstract = {The Communications Web site, http://cacm.acm.org, features more than a dozen bloggers in the BLOG@CACM community. In each issue of Communications, we'll publish selected posts or excerpts.twitterFollow us on Twitter at http://twitter.com/blogCACMhttp://cacm.acm.org/blogs/blog-cacmMark Guzdial considers the consequences of requiring all schoolchildren to study computer science.},
journal = {Commun. ACM},
month = {aug},
pages = {8–9},
numpages = {2}
}

@inproceedings{ASP_Types_1,
author = {Endrikat, Stefan and Hanenberg, Stefan and Robbes, Romain and Stefik, Andreas},
title = {How Do API Documentation and Static Typing Affect API Usability?},
year = {2014},
isbn = {9781450327565},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2568225.2568299},
doi = {10.1145/2568225.2568299},
abstract = {When developers use Application Programming Interfaces (APIs), they often rely on documentation to assist their tasks. In previous studies, we reported evidence indicating that static type systems acted as a form of implicit documentation, benefiting developer productivity. Such implicit documentation is easier to maintain, given it is enforced by the compiler, but previous experiments tested users without any explicit documentation. In this paper, we report on a controlled experiment and an exploratory study comparing the impact of using documentation and a static or dynamic type system on a development task. Results of our study both confirm previous findings and show that the benefits of static typing are strengthened with explicit documentation, but that this was not as strongly felt with dynamically typed languages.},
booktitle = {Proceedings of the 36th International Conference on Software Engineering},
pages = {632–642},
numpages = {11},
keywords = {API Usability, Documentation, Static Type Systems},
location = {Hyderabad, India},
series = {ICSE 2014}
}

%TAG: VisuallyImpaired
@inproceedings{10.1145/2538862.2538975,
author = {Kane, Shaun K. and Bigham, Jeffrey P.},
title = {Tracking @stemxcomet: Teaching Programming to Blind Students via 3D Printing, Crisis Management, and Twitter},
year = {2014},
isbn = {9781450326056},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2538862.2538975},
doi = {10.1145/2538862.2538975},
abstract = {Introductory programming activities for students often include graphical user interfaces or other visual media that are inaccessible to students with visual impairments. Digital fabrication techniques such as 3D printing offer an opportunity for students to write programs that produce tactile objects, providing an accessible way of exploring program output. This paper describes the planning and execution of a four-day computer science education workshop in which blind and visually impaired students wrote Ruby programs to analyze data from Twitter regarding a fictional ecological crisis. Students then wrote code to produce accessible tactile visualizations of that data. This paper describes outcomes from our workshop and suggests future directions for integrating data analysis and 3D printing into programming instruction for blind students.},
booktitle = {Proceedings of the 45th ACM Technical Symposium on Computer Science Education},
pages = {247–252},
numpages = {6},
keywords = {fabrication, crisis informatics, programming, visual impairments, 3D printing, education, accessibility},
location = {Atlanta, Georgia, USA},
series = {SIGCSE '14}
}

%%%%%%%%%%%%%%  Articles published in 2015  %%%%%%%%%%%%%%

@article{X15,
author = {Xinogalos, Stelios},
title = {Object-Oriented Design and Programming: An Investigation of Novices’ Conceptions on Objects and Classes},
year = {2015},
issue_date = {September 2015},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {15},
number = {3},
url = {https://doi.org/10.1145/2700519},
doi = {10.1145/2700519},
abstract = {The Object-Oriented Programming (OOP) technique is nowadays the most popular programming technique among tertiary education institutions. However, learning OOP is a cognitively demanding task for undergraduate students. Several difficulties and misconceptions have been recorded in the literature for both OOP concepts and languages, mainly Java. This article focuses on reviewing and advancing research on the most fundamental OOP concepts, namely, the concepts of “object” and “class” and their role during program execution. The results of a long-term investigation on the subject are presented, focusing on a study exploring undergraduate students’ conceptions on “objects” and “classes.” The study advances related research on categories of conceptions on “objects” and “classes” by providing quantitative results, in addition to qualitative results, regarding the frequency of the recorded conceptions. Nearly half the students seem to comprehend the modeling and static/dynamic aspects of the concepts “object” and “class.” Implications for achieving a deep conceptual understanding of text, action, and modeling aspects of these fundamental concepts are also discussed. Information regarding the programming environments utilized in the course and key features of the applied teaching approach are presented, in order to facilitate both a better understanding of the context and a better employment of the results of the presented study. Finally, proposals for enhancing the contribution of this and similar studies are made.},
journal = {ACM Trans. Comput. Educ.},
month = {jul},
articleno = {13},
numpages = {21},
keywords = {class, conceptions, object, Object-oriented programming, teaching/learning programming, misconceptions}
}

@inproceedings{10.1145/2816707.2816720,
author = {Fischer, Lars and Hanenberg, Stefan},
title = {An Empirical Investigation of the Effects of Type Systems and Code Completion on API Usability Using TypeScript and JavaScript in MS Visual Studio},
year = {2015},
isbn = {9781450336901},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2816707.2816720},
doi = {10.1145/2816707.2816720},
abstract = {Recent empirical studies that compared static and dynamic type systems on API usability showed a positive impact of static type systems on developer productivity in most cases. Nevertheless, it is unclear how large this effect is in comparison to other factors. One obvious factor in programming is tooling: It is commonly accepted that modern IDEs have a large positive impact on developers, although it is not clear which parts of modern IDEs are responsible for that. One possible---and for most developers obvious candidate---is code completion. This paper describes a 2x2 randomized trial that compares JavaScript and Microsoft's statically typed alternative TypeScript with and without code completion in MS Visual Studio. While the experiment shows (in correspondence to previous experiments) a large positive effect of the statically typed language TypeScript, the code completion effect is not only marginal, but also just approaching statistical significance. This seems to be an indicator that the effect of static type systems is larger than often assumed, at least in comparison to code completion.},
booktitle = {Proceedings of the 11th Symposium on Dynamic Languages},
pages = {154–167},
numpages = {14},
keywords = {type systems, programming languages, empirical research, code completion},
location = {Pittsburgh, PA, USA},
series = {DLS 2015}
}

@article{ASP_Types_2,
author = {Fischer, Lars and Hanenberg, Stefan},
title = {An Empirical Investigation of the Effects of Type Systems and Code Completion on API Usability Using TypeScript and JavaScript in MS Visual Studio},
year = {2015},
issue_date = {Feburary 2016},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {51},
number = {2},
issn = {0362-1340},
url = {https://doi.org/10.1145/2936313.2816720},
doi = {10.1145/2936313.2816720},
abstract = {Recent empirical studies that compared static and dynamic type systems on API usability showed a positive impact of static type systems on developer productivity in most cases. Nevertheless, it is unclear how large this effect is in comparison to other factors. One obvious factor in programming is tooling: It is commonly accepted that modern IDEs have a large positive impact on developers, although it is not clear which parts of modern IDEs are responsible for that. One possible---and for most developers obvious candidate---is code completion. This paper describes a 2x2 randomized trial that compares JavaScript and Microsoft's statically typed alternative TypeScript with and without code completion in MS Visual Studio. While the experiment shows (in correspondence to previous experiments) a large positive effect of the statically typed language TypeScript, the code completion effect is not only marginal, but also just approaching statistical significance. This seems to be an indicator that the effect of static type systems is larger than often assumed, at least in comparison to code completion.},
journal = {SIGPLAN Not.},
month = {oct},
pages = {154–167},
numpages = {14},
keywords = {empirical research, programming languages, type systems, code completion}
}




%%%%%%%%%%%%%%  Articles published in 2016  %%%%%%%%%%%%%%

%TAG: VisuallyImpaired
@inproceedings{10.1145/2897586.2897616,
author = {Albusays, Khaled and Ludi, Stephanie},
title = {Eliciting Programming Challenges Faced by Developers with Visual Impairments: Exploratory Study},
year = {2016},
isbn = {9781450341554},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2897586.2897616},
doi = {10.1145/2897586.2897616},
abstract = {Without understanding the programming difficulties faced by developers with visual impairments, the research community cannot begin to work on effective solutions to overcome these potential problems. This paper will describe our initial empirically based study to identify the problems blind software developers face. We analyzed 69 survey responses with blind developers in an effort to identify the aspects that are indeed a challenge to software development. The results indicate a number of difficulties, workarounds, and basis requirements that will serve as domain and stakeholder understand.},
booktitle = {Proceedings of the 9th International Workshop on Cooperative and Human Aspects of Software Engineering},
pages = {82–85},
numpages = {4},
keywords = {blind programmers, programmers, programming challenges, elicitation, visual impairment, accessibility},
location = {Austin, Texas},
series = {CHASE '16}
}

@inproceedings{IP16:drop,
author = {Pappas, Ilias O. and Giannakos, Michail N. and Jaccheri, Letizia},
title = {Investigating Factors Influencing Students' Intention to Dropout Computer Science Studies},
year = {2016},
isbn = {9781450342315},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2899415.2899455},
doi = {10.1145/2899415.2899455},
abstract = {Research in the area of Computer Science (CS) education, has focused on identifying the reasons that students do not finish their studies in CS. Although there is increasing demand for CS professionals, there is not enough knowledge to explain the high dropout rates in CS education. This study aims to empirically examine how students' intention to complete their studies (retention) in CS is affected by variables playing a key role in higher education. By identifying which variables contribute to dropout in CS studies, we will be able to focus on how to improve aspects related with them in order to reduce dropout rates. To do so we identified the following variables: Year of studies, Gender, Age, Students' Effort, Absence from Classes, Expected Grade point average (GPA), and Current GPA, and tested their effect on retention, based on the responses collected from 241 CS student. Year of studies and Effort have positive effects on students' intention to finish their studies in CS. Interestingly, the expected GPA has a negative effect on students' intentions to finish their studies. The findings contribute to theory and practice, as they offer CS educators and policy makers insights that may aid towards increased student retention and reduced dropout rates.},
booktitle = {Proceedings of the 2016 ACM Conference on Innovation and Technology in Computer Science Education},
pages = {198–203},
numpages = {6},
keywords = {retention, higher education., computer science education, dropout},
location = {Arequipa, Peru},
series = {ITiCSE '16}
}

@inproceedings{10.1145/2839509.2844628, author = {Wang, Jennifer and Hong, Hai and Ravitz, Jason and Hejazi Moghadam, Sepehr}, 
title = {Landscape of K-12 Computer Science Education in the U.S.: Perceptions, Access, and Barriers}, 
year = {2016},
isbn = {9781450336857},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2839509.2844628},
doi = {10.1145/2839509.2844628}, abstract = {Through surveys of 1,673 students, 1,685 parents, 1,013 teachers, 9,693 principals, and 1,865 superintendents across the United States, this study explores perceptions, access, and barriers to computer science education at the K-12 level. 
We found most respondents were unable to distinguish computer literacy activities from computer science, with female, Black, or Hispanic respondents even less likely to do so. Perceptions of who does computer science were narrow and stereotypical (White, male, smart), but there was high value and demand for computer science across all populations, particularly among parents. 
Results indicate discrepancies in access to technology and computer science. Over 75% of principals reported their school did not offer computer science with programming/coding, but Hispanic students reported lower exposure to computers at home and in school and Black students and lower income students reported less access to computer science learning in school. 
Hispanic students and female students were also less likely to have learned computer science or have confidence to learn computer science compared to their counterparts. 
Finally, we explored barriers to access and identified a harsh disconnect: parent and student demand for computer science education was high while administrators' perceptions of this demand was low. 
Additionally, the most common barriers to offering computer science cited by principals and superintendents were the need to dedicate time to other courses and testing requirements and the lack of qualified teachers, with technology less common of a barrier.}, 
booktitle = {Proceedings of the 47th ACM Technical Symposium on Computing Science Education}, 
pages = {645–650}, 
numpages = {6}, 
keywords = {knowledge, income., perceptions, underrepresented minorities, superintendents, diversity, pre-university, principals, parents, barriers, access, hispanic, teachers, black, latino/a, k-12, middle school, african american, pre-college, high school}, 
location = {Memphis, Tennessee, USA}, 
series = {SIGCSE '16} }

%%%%%%%%%%%%%%  Articles published in 2017  %%%%%%%%%%%%%%

% inproceedings{10.1145/3017680.3022466,
@inproceedings{CGPSO17:orca,
author = {Chen, Jianting and Gopalaswamy, Medha and Pradhan, Prabir and Son, Sooji and Osera, Peter-Michael},
title = {ORC2A: A Proof Assistant for Undergraduate Education},
year = {2017},
isbn = {9781450346986},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3017680.3022466},
doi = {10.1145/3017680.3022466},
abstract = {There is a natural correspondence between mathematical proofs and computer programs. For instance, a recursive function and its correctness relate directly to inductive proofs in mathematics. However, many undergraduate students feel a disconnect between mathematics and computer science. There are several proof assistant tools which have been used by the educational community to introduce such concepts to students, but since these tools are not primarily created for educational purposes, students often do not benefit from them to the expected extent.We have created an educational tool that draws from the benefits of existing provers and assistants and includes a novel proof language that mimics handwritten proofs. By creating a proof assistant with an intuitive user interface and a rich mechanism for providing constructive feedback, we hope to bridge the gap that many introductory computer science students find between mathematical proofs and program correctness.},
booktitle = {Proceedings of the 2017 ACM SIGCSE Technical Symposium on Computer Science Education},
pages = {757–758},
numpages = {2},
keywords = {program verification, computer science pedagogy, proof assistant},
location = {Seattle, Washington, USA},
series = {SIGCSE '17}
}

  


@article{Passey17:compulsory,
	author = {Passey, Don},
	year = {2017},
	month = {03},
	pages = {},
	title = {Computer science (CS) in the compulsory education curriculum: Implications for future research},
	url = {https://link.springer.com/article/10.1007/s10639-016-9475-z},
	volume = {22},
	journal = {Education and Information Technologies},
	doi = {10.1007/s10639-016-9475-z}
}

@inproceedings{ASP_Errors,
author = {Wrenn, John and Krishnamurthi, Shriram},
title = {Error Messages Are Classifiers: A Process to Design and Evaluate Error Messages},
year = {2017},
isbn = {9781450355308},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3133850.3133862},
doi = {10.1145/3133850.3133862},
abstract = {This paper presents a lightweight process to guide error report authoring. We take the perspective that error reports are really classifiers of program information. They should therefore be subjected to the same measures as other classifiers (e.g., precision and recall). We formalize this perspective as a process for assessing error reports, describe our application of this process to an actual programming language, and present a preliminary study on the utility of the resulting error reports.},
booktitle = {Proceedings of the 2017 ACM SIGPLAN International Symposium on New Ideas, New Paradigms, and Reflections on Programming and Software},
pages = {134–147},
numpages = {14},
keywords = {Pyret, highlighting, classifiers, precision and recall, error messages},
location = {Vancouver, BC, Canada},
series = {Onward! 2017}
}

%%%%%%%%%%%%%%  Articles published in 2018  %%%%%%%%%%%%%%

@article{FK18:StudentsTOC,
    author  = "Christiane Frede and Maria Knobelsdorf",
    title   = "Exploring how Students Perform in a Theory of Computation Course Using Final Exam and Homework Assignments Data",
    year    = "2018",
    journal = "Proceedings of the 2018 ACM Conference on International Computing Education Research",
    pages   = "241--249"
}

@book{FFFK18:HtDP,
  title={How to design programs: an introduction to programming and computing},
  author={Felleisen, Matthias and Findler, Robert Bruce and Flatt, Matthew and Krishnamurthi, Shriram},
  year={2018},
  publisher={MIT Press}
}

@inproceedings{NA18:PythonC++,
author = {Alzahrani, Nabeel and Vahid, Frank and Edgcomb, Alex and Nguyen, Kevin and Lysecky, Roman},
title = {Python Versus C++: An Analysis of Student Struggle on Small Coding Exercises in Introductory Programming Courses},
year = {2018},
isbn = {9781450351034},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3159450.3160586},
doi = {10.1145/3159450.3160586},
abstract = {Many teachers of CS 1 (introductory programming) have switched to Python rather than C, C++, or Java. One reason is the belief that Python's interpreted nature plus simpler syntax and semantics ease a student's learning, but data supporting that belief is scarce. This paper addresses the question: Do Python learners struggle less than C++ learners? We analyzed student submissions on small coding exercises in CS 1 courses at 20 different universities, 10 courses using Python, and 11 using C++. Each course used either the Python or C++ version of an online textbook from one publisher, each book having 100+ small coding exercises, expected to take 2-5 minutes each. We considered 11 exercises whose Python and C++ versions were nearly identical and that appeared in various chapters. We defined struggle rate for exercises, where struggle means a student spent excessive time or attempts on an exercise. Based on that rate, we found the learning for Python was not eased; in fact, Python students had significantly higher struggle rates than C++ students (26\% vs. 13\%). Higher rates were seen even when considering only classes with no prerequisites, classes for majors only, or classes for non-majors only. We encourage the community to do further analyses, to help guide teachers when choosing a CS 1 language.},
booktitle = {Proceedings of the 49th ACM Technical Symposium on Computer Science Education},
pages = {86–91},
numpages = {6},
keywords = {student struggle, coding exercises, python versus c++, CS1, introductory programming, homework},
location = {Baltimore, Maryland, USA},
series = {SIGCSE '18}
}

@inbook{JD18:lowlevel,
author = {Durán, Francisco José and Villagrá-Arnedo, Carlos and Satorre-Cuerda,
Rosana and Rosique, Patricia and Llorens, Faraón},
year = {2018},
month = {01},
pages = {431-445},
title = {Effects of Low-Level Development on Learning to Program},
isbn = {978-3-319-91151-9},
doi = {10.1007/978-3-319-91152-6_33},
abstract="There are subjects in which teaching and learning is hard by experience.
Some subjects in physics, maths or computing seem to be difficult by nature.
Teachers test many ways to help student learn these subjects. In Computer Programming
the approach seems to be using higher-level languages, concepts and abstractions.
It seems reasonable that languages similar to human language can ease the task of
computer programming. Similar ideas are explored in other subjects. However, this
seems contradictory with the way we construct knowledge: lower-level concepts support
the development of higher-level ones. Is it possible to master higher-level concepts
without previously mastering lower-level ones?"
}

% TAG: Recursion
% TAG: NotionalMachine

% Annoying ACM label: 10.1145/3159450.3159479
@inproceedings{TFK18:Recursion,
author = {Tunnell Wilson, Preston and Fisler, Kathi and Krishnamurthi, Shriram},
title = {Evaluating the Tracing of Recursion in the Substitution Notional Machine},
year = {2018},
isbn = {9781450351034},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3159450.3159479},
doi = {10.1145/3159450.3159479},
abstract = {We evaluate a notional machine for recursion based on algebraic substitution. To do
this, we decompose recursion into a progression of function call patterns, parameter
name reuse, and data structure complexity. At each stage, we test students' ability
to trace programs using substitution. We evaluate the correctness of their traces
along multiple dimensions, finding that students generally do well, and also observe
shortcuts and identify misconceptions. For comparison, we also have students trace
two problems using a traditional, imperative notional machine. Even though the substitution
model is unwieldy to use with compound data, students still perform better with it
than with the traditional notional machine.},
booktitle = {Proceedings of the 49th ACM Technical Symposium on Computer Science Education},
pages = {1023–1028},
numpages = {6},
keywords = {substitution, pedagogy, tracing, recursion},
location = {Baltimore, Maryland, USA},
series = {SIGCSE '18}
}

@article{JW18:PythonC,
author = {Wainer, Jacques and Xavier, Eduardo C.},
title = {A Controlled Experiment on Python vs C for an Introductory Programming Course: Students’ Outcomes},
year = {2018},
issue_date = {September 2018},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {18},
number = {3},
url = {https://doi.org/10.1145/3152894},
doi = {10.1145/3152894},
abstract = {We performed a controlled experiment comparing a C and a Python Introductory Programming course. Three faculty members at University of Campinas, Brazil, taught the same CS1 course for the same majors in two different semesters, one version in Python and one in C, with a total of 391 students involved in the experiment. We measured the dropout rate, the failure rate, the grades on the two exams, the proportion of completed lab assignments, and the number of submissions per completed assignment. There was no difference in the dropout rate. The failure rate for Python was 16.9% against 23.1% for C. The effect size (Cohen’s D) on the comparison of Python against C on the midterm exam was 0.27, and 0.38 for the final exam. The effect size for the proportion of completed assignments was 0.39 and the effect size for the number of submissions per assignment was -0.61 (Python had less submissions per completed assignments). Thus, for all measures, with the exception of dropout rate, the version of the course in Python yielded better student outcomes than the version in C and all differences are significant (with 95% confidence) with the exception of the failure rate (p-value=0.12).},
journal = {ACM Trans. Comput. Educ.},
month = {aug},
articleno = {12},
numpages = {16},
keywords = {Introductory programming, controlled experiment, CS1, C, Python}
}

%%%%%%%%%%%%%%  Articles published in 2019  %%%%%%%%%%%%%%

@article{10.5555/3306465.3306473,
author = {McManus, John W. and Costello, Philip J.},
title = {Project Based Learning in Computer Science: A Student and Research Advisor's Perspective},
year = {2019},
issue_date = {January 2019},
publisher = {Consortium for Computing Sciences in Colleges},
address = {Evansville, IN, USA},
volume = {34},
number = {3},
issn = {1937-4771},
abstract = {The dominant pedagogy for Computer Science education often focuses on teaching isolated skills across a set of core courses. Recently the community has adopted Senior Capstone Projects and Project Based Learning to provide a cumulating experience designed to include a clear focus on: critical thinking and problem solving; collaboration and leadership; verbal and written communications; and independent work. This paper discusses the application of project-based learning to Computer Science education, providing a student's perspective and a research advisor's perspective. An example of applying Project Based Learning is presented and the effectiveness and relevance of Project Based Learning for Computer Science education is discussed.},
journal = {J. Comput. Sci. Coll.},
month = {jan},
pages = {38–46},
numpages = {9}
}

@article{ASP:PBL_3,
author = {McManus, John W. and Costello, Philip J.},
title = {Project Based Learning in Computer Science: A Student and Research Advisor's Perspective},
year = {2019},
issue_date = {January 2019},
publisher = {Consortium for Computing Sciences in Colleges},
address = {Evansville, IN, USA},
volume = {34},
number = {3},
issn = {1937-4771},
abstract = {The dominant pedagogy for Computer Science education often focuses on teaching isolated skills across a set of core courses. Recently the community has adopted Senior Capstone Projects and Project Based Learning to provide a cumulating experience designed to include a clear focus on: critical thinking and problem solving; collaboration and leadership; verbal and written communications; and independent work. This paper discusses the application of project-based learning to Computer Science education, providing a student's perspective and a research advisor's perspective. An example of applying Project Based Learning is presented and the effectiveness and relevance of Project Based Learning for Computer Science education is discussed.},
journal = {J. Comput. Sci. Coll.},
month = {jan},
pages = {38–46},
numpages = {9}
}

% article{DBLP:journals/corr/abs-1907-04134,
@article{WO19:bridge,
  author       = {David G. Wonnacott and
                  Peter{-}Michael Osera},
  title        = {A Bridge Anchored on Both Sides: Formal Deduction in Introductory
                  CS, and Code Proofs in Discrete Math},
  journal      = {CoRR},
  volume       = {abs/1907.04134},
  year         = {2019},
  url          = {http://arxiv.org/abs/1907.04134},
  eprinttype    = {arXiv},
  eprint       = {1907.04134},
  timestamp    = {Wed, 17 Jul 2019 10:27:36 +0200},
  biburl       = {https://dblp.org/rec/journals/corr/abs-1907-04134.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}


%%%%%%%%%%%%%%  Articles published in 2020  %%%%%%%%%%%%%%

@article{Theobald_etal20:Underrepresented,
 title         = {Active learning narrows achievement gaps for underrepresented students in undergraduate science, technology, engineering, and math},
 author        = {Elli J. Theobald and Mariah J. Hill and Elisa Tran and Sweta Agrawal and E. Nicole Arroyo and Shawn Behling and Nyasha Chambwe and Dianne Laboy Cintrón and Jacob D. Cooper and Gideon Dunster and Jared A. Grummer and Kelly Hennessey and Jennifer Hsiao and Nicole Iranon and Leonard Jones II and Hannah Jordt and Marlowe Keller and Melissa E. Lacey and Caitlin E. Littlefield and Alexander Lowe and Shannon Newman and Vera Okolo and Savannah Olroyd and Brandon R. Peecook and Sarah B. Pickett and David L. Slager and Itzue W. Caviedes-Solis and Kathryn E. Stanchak and Vasudha Sundaravardan and Camila Valdebenito and Claire R. Williams and Kaitlin Zinsli and and Scott Freeman},
 journal        = {Proceedings of the National Academy of Sciences},
 publisher      = {National Academiy of Sciences},
 year           = 2020,
 month          = Mar,
 volume         = 117,
 number         = 12,
 doi            = {www.pnas.org/cgi/doi/10.1073/pnas.1916903117}
}


% inproceedings{10.1145/3437800.3439202,
% Interesting, Lewis is also, perhaps, Lewis14:Recursion
@inproceedings{all20:notional,
author = {Fincher, Sally and Jeuring, Johan and Miller, Craig S. and Donaldson, Peter and du Boulay, Benedict and Hauswirth, Matthias and Hellas, Arto and Hermans, Felienne and Lewis, Colleen and M\"{u}hling, Andreas and Pearce, Janice L. and Petersen, Andrew},
title = {Notional Machines in Computing Education: The Education of Attention},
year = {2020},
isbn = {9781450382939},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3437800.3439202},
doi = {10.1145/3437800.3439202},
abstract = {This report defines notional machines (NMs), and provides a series of definitional characteristics by which they may be identified. Over several sections, it includes a first-hand report of the origin of NMs, reports a systematic literature review to track the use and development of the concept, and presents a small collection of examples collected through interviews with experienced teachers. Additionally, the report presents NMs in a common format, and makes some preliminary explorations of their use in practice, including examples of instructors using multiple NMs in sequence. Approach and method are fully detailed in evidential appendices, to support replication of results and adoption/adaptation of practice.},
booktitle = {Proceedings of the Working Group Reports on Innovation and Technology in Computer Science Education},
pages = {21–50},
numpages = {30},
keywords = {computing education, notional machines},
location = {Trondheim, Norway},
series = {ITiCSE-WGR '20}
}

@inproceedings{10.1145/3328778.3366834,
author = {Valstar, Sander and Krause-Levy, Sophia and Macedo, Alexandra and Griswold, William G. and Porter, Leo},
title = {Faculty Views on the Goals of an Undergraduate CS Education and the Academia-Industry Gap},
year = {2020},
isbn = {9781450367936},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3328778.3366834},
doi = {10.1145/3328778.3366834},
abstract = {Previous work has found that recent computer science graduates often experience difficulty transitioning into their new roles in industry due to a significant gap between their academic experiences and industry's expectations. Although multiple studies have identified the views of students and members of industry on the value of a CS degree as preparation for industry, the faculty perspective on this topic remains unclear. Understanding these views could shed light on why the academia-industry gap has persisted despite the attention. This study identified faculty views on the goals of an undergraduate education and a CS major, focusing on preparation for careers in industry. In order to identify a spectrum of faculty views, we interviewed 14 faculty from a variety of backgrounds across three institutions. A phenomenographic analysis of the transcripts reveals that many faculty believe that industry preparation is an important programmatic goal, yet they encounter significant resource obstacles to achieving that goal.},
booktitle = {Proceedings of the 51st ACM Technical Symposium on Computer Science Education},
pages = {577–583},
numpages = {7},
keywords = {computer science education, academia-industry gap, phenomenography, faculty views},
location = {Portland, OR, USA},
series = {SIGCSE '20}
}



@inproceedings{TMWF20:gatekeeper,
author = {Torbey, Ryan and Martin, Nicole D. and Warner, Jayce R. and Fletcher, Carol L.},
title = {Algebra I Before High School as a Gatekeeper to Computer Science Participation},
year = {2020},
isbn = {9781450367936},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3328778.3366877},
doi = {10.1145/3328778.3366877},
abstract = {A complex web of factors can influence whether students participate in computer science (CS) during high school. In order to increase participation in CS for all students, we need to better understand who is currently participating and what factors might be hindering participation. This study utilized a large-scale, student-level dataset from the Texas Education Research Center to investigate factors that predict high school student participation in CS and advanced CS courses. Our dataset contained information on over 1.1 million Texas high school students from the 2017-2018 school year, allowing us visibility into CS course availability in schools, student course taking, and detailed demographic information. We used multilevel mixed-effects logistic regression models to explore predictive factors of student participation in CS and advanced CS courses, limiting our analysis to students whose schools offered CS. In both models, our results showed that students who took Algebra I before high school had more than double the odds of being enrolled in a CS course. This work supports and extends previous understanding of factors that are predictive of CS participation in high school, contributing to the existing literature by uncovering the importance of Algebra I before high school as a potential gatekeeper to participation in CS.},
booktitle = {Proceedings of the 51st ACM Technical Symposium on Computer Science Education},
pages = {839–844},
numpages = {6},
keywords = {predictors of cs enrollment, participation, math pathways, k-12 course enrollment, high school cs, equity, cs pathways, broadening participation, algebra, access},
location = {Portland, OR, USA},
series = {SIGCSE '20}
}


@inproceedings{ASP_Tests,
author = {Wrenn, John and Krishnamurthi, Shriram},
title = {Will Students Write Tests Early Without Coercion?},
year = {2020},
isbn = {9781450389211},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3428029.3428060},
doi = {10.1145/3428029.3428060},
abstract = {Students faced with a programming task often begin their implementation without a sufficient understanding of the problem. Several prior papers suggest that formulating input–output examples before beginning one’s implementation is the key to averting problem misunderstandings, but that students are loath to actually do it. Is outright coercion instructors’ only hope to convince students to follow this methodology and hence help themselves? We conjecture that students’ reluctance may stem from the disaffordances of their programming environments. In this work, we augment the student’s programming environment to encourage examples-first development, and design a novel measure to assess students’ adherence to this methodology. We apply these measures to students using our modified environment in a semester-long course, and find high voluntary adherence, especially relative to the literature’s low expectations.},
booktitle = {Koli Calling '20: Proceedings of the 20th Koli Calling International Conference on Computing Education Research},
articleno = {27},
numpages = {5},
keywords = {testing, examples-first, Pyret, self-regulation, CS1, Examplar},
location = {Koli, Finland},
series = {Koli Calling '20}
}

@article{ASP_ACM_2030,
author = {Tissenbaum, Mike and Ottenbreit-Leftwich, Anne},
title = {A Vision of K---: 12 Computer Science Education for 2030},
year = {2020},
issue_date = {May 2020},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {63},
number = {5},
issn = {0001-0782},
url = {https://doi.org/10.1145/3386910},
doi = {10.1145/3386910},
abstract = {Exploring goals, perspectives, and challenges.},
journal = {Commun. ACM},
month = {apr},
pages = {42–44},
numpages = {3}
}


%%%%%%%%%%%%%%  Articles published in 2021  %%%%%%%%%%%%%%

@article{FD21:lowlevel,
	title = {A low-level approach to improve programming learning},
	volume = {20},
	issn = {1615-5289, 1615-5297},
	url = {https://link.springer.com/10.1007/s10209-020-00775-y},
	doi = {10.1007/s10209-020-00775-y},
	language = {en},
	number = {3},
	urldate = {2021-10-28},
	journal = {Universal Access in the Information Society},
	author = {Gallego-Durán, Francisco J. and Satorre-Cuerda, Rosana and Compañ-Rosique, Patricia and Villagrá-Arnedo, Carlos J. and Molina-Carmona, Rafael and Llorens-Largo, Faraón},
	month = aug,
	year = {2021},
	pages = {479--493}
}

@inproceedings{Fisler2021,
  author = {Fisler, Kathi and Schanzer, Emmanuel and Weimar, Steve and 
            Fetter, Annie and Renninger, K. Ann and 
            Krishnamurthi, Shriram and Politz, Joe Gibbs and 
            Lerner, Benjamin and Poole, Jennifer and Koerner, Christine},
  title = {Evolving a K-12 Curriculum for Integrating Computer
  Science into Mathematics},
  year = {2021},
  isbn = {9781450380621},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  doi = {doi:10.1145/3408877.3432546},
  booktitle = {Proceedings of the 52nd ACM Technical Symposium on
  Computer Science Education},
  pages = {59–65},
}

@inproceedings{10.1145/3505711.3505728,
author = {Thi Van Pham, Anh and Huu Tran, Thien},
title = {The Implementation of Project-Based Learning Approach in Technical Courses: An Investigation into Students’ Perceptions},
year = {2021},
isbn = {9781450390699},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3505711.3505728},
doi = {10.1145/3505711.3505728},
abstract = {Project-based learning is widely regarded as a viable strategy for enhancing student learning in higher education. Project-based learning effectively bridges the theoretical and practical education gaps by encouraging true knowledge, initiative, and a greater comprehension of the subject. This study was conducted to explore students’ perceptions towards the implementation of project-based learning in technical courses in a college in Vietnam where this method has been employed for several years. Data were collected from 98 students majoring in website design and software engineering courses. The questionnaire was developed in Google Form, and the link was sent to the participants via their email addresses. The results show that most of the students have positive perceptions of project-based learning approach. Students indicated that they gained confidence, enhanced their critical thinking and problem-solving abilities in computing disciplines, and enhanced their ability to communicate, engage, and work with team members, contributing to the overall quality of education.},
booktitle = {2021 The 5th International Conference on Advances in Artificial Intelligence (ICAAI)},
pages = {124–129},
numpages = {6},
keywords = {Technical courses, Project-based learning, Students’ perception},
location = {Virtual Event, United Kingdom},
series = {ICAAI 2021}
}

@inproceedings{ASP_ErrorM_Readability,
author = {Denny, Paul and Prather, James and Becker, Brett A. and Mooney, Catherine and Homer, John and Albrecht, Zachary C and Powell, Garrett B.},
title = {On Designing Programming Error Messages for Novices: Readability and Its Constituent Factors},
year = {2021},
isbn = {9781450380966},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3411764.3445696},
doi = {10.1145/3411764.3445696},
abstract = {Programming error messages play an important role in learning to program. The cycle of program input and error message response completes a loop between the programmer and the compiler/interpreter and is a fundamental interaction between human and computer. However, error messages are notoriously problematic, especially for novices. Despite numerous guidelines citing the importance of message readability, there is little empirical research dedicated to understanding and assessing it. We report three related experiments investigating factors that influence programming error message readability. In the first two experiments we identify possible factors, and in the third we ask novice programmers to rate messages using scales derived from these factors. We find evidence that several key factors significantly affect message readability: message length, jargon use, sentence structure, and vocabulary. This provides novel empirical support for previously untested long-standing guidelines on message design, and informs future efforts to create readability metrics for programming error messages.},
booktitle = {Proceedings of the 2021 CHI Conference on Human Factors in Computing Systems},
articleno = {55},
numpages = {15},
keywords = {CS1, human computer interaction, programming error messages, students, compiler design and implementation, novice programmers, compiler error messages, HCI, introductory programming, readability},
location = {Yokohama, Japan},
series = {CHI '21}
}

%%%%%%%%%%%%%%  Articles published in 2022  %%%%%%%%%%%%%%
@inproceedings{DRB22,
author = {Dickson, Paul E. and Richards, Tim and Becker, Brett A.},
title = {Experiences Implementing and Utilizing a Notional Machine in the Classroom},
year = {2022},
isbn = {9781450390705},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3478431.3499320},
doi = {10.1145/3478431.3499320},
abstract = {In the computing education community, discussion is growing about the benefits of teaching programming by explicitly using notional machines to help students. To-date most work is largely theoretical and little work addresses actually using them in a classroom. This paper documents our experience of creating a notional machine for a specific course and using it in that classroom. A key point we learned while creating this notional machine is that many of the difficulties encountered were due to the concept of a notional machine being tightly coupled to students' mental models. Although not surprising, the numerous complications this brings are important to overcome. The potential amount of detail included in the notional machine is enormously influenced by the students' mental models, which are likely specific to a course, and also change throughout a semester -- and certainly across several semesters. We present lessons learned from this experience, among them that implementing a notional machine and using it in class is a non-trivial yet possibly beneficial exercise.},
booktitle = {Proceedings of the 53rd ACM Technical Symposium on Computer Science Education - Volume 1},
pages = {850–856},
numpages = {7},
keywords = {stack traces, visualization, memory diagrams, notional machines, program construction, mental models, pedagogy, code writing, introductory programming, code tracing, cs1},
location = {Providence, RI, USA},
series = {SIGCSE 2022}
}


% see https://tex.stackexchange.com/questions/135082/referencing-a-bachelors-thesis
@mastersthesis{Shukla22:Thesis,
author={Gulesh Shukla},
advisor={David G. Wonnacott},
title={Recursion: Difficulties and Possible Solutions},
type={Bachelor's Thesis},
school={Haverford College},
department={computer science},
year=2022,
month={May}
}

% article{10.5555/3580523.3580533,
@article{SW22:recursion,
author = {Shukla, Gulesh and Wonnacott, David G.},
title = {On Teaching and Testing Recursive Programming},
year = {2022},
issue_date = {November 2022},
publisher = {Consortium for Computing Sciences in Colleges},
address = {Evansville, IN, USA},
volume = {38},
number = {3},
issn = {1937-4771},
abstract = {Novice programmers face many challenges when learning to program. Recursion is often considered a particularly difficult challenge. Considerable research has been done to explore the ways in which new students understand recursive code. Our survey of this research suggests that much of the education research focuses on the use of tracing to teach recursion, and to test student understanding thereof.However, a fundamentally different approach is suggested by our informal conversations with faculty who emphasize recursion in the first or second semester. Specifically, many faculty try to develop students' ability to think abstractly about functions they call, and then leverage this thinking to help students think about recursive functions without getting lost in a morass of detail.In this paper, we consider some of the challenges of teaching recursion via abstraction, propose experiments to measure the success of this approach, and report on the results of a preliminary experiment this past spring. We close with our thoughts about pedagogy, the classification of notional machines, and tool support for various types of visualization.},
journal = {J. Comput. Sci. Coll.},
month = {nov},
pages = {98–106},
numpages = {9}
}


@article{ASP:PBL_1,
author = {Malik, Khalid and Zhu, Meina},
year = {2022},
month = {09},
pages = {1-24},
title = {Do project-based learning, hands-on activities, and flipped teaching enhance student’s learning of introductory theoretical computing classes?},
journal = {Education and Information Technologies},
doi = {10.1007/s10639-022-11350-8}
}

%%%%%%%%%%%%%%  Articles published in 2023  %%%%%%%%%%%%%%


% TAG: race, retention (note this also cites Bergin and Reilly about high-school math and CS1, but Bergin & Reilly don't meniton race/minority: https://dl.acm.org/doi/pdf/10.1145/1047344.1047480)
% ACM calls this 10.1145/3545945.3569867
@inproceedings{EH23:StudyCS2,
author = {Ellis, Margaret and Hooshangi, Sara},
title = {Replication and Expansion Study on Factors Influencing Student Performance in CS2},
year = {2023},
isbn = {9781450394314},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3545945.3569867},
doi = {10.1145/3545945.3569867},
abstract = {While many studies have focused on students' performance in CS1 courses, research related to the performance and persistence of students in CS2 classes is not as widely performed. In this work, we will extend our previous work to examine students' performance in CS2. We examined a data set that spanned over seven years on more than 5300 student records. In addition to typical factors studied by others (i.e. gender, race, CS1 performance), our work also took into account the relationship between various CS1 pathways to CS2, student major, and the number of previous college CS courses (including transfer credits) and student performance in CS2. CS1 grade is a good indicator of performance in CS2. Gender was not a significant factor in determining performance in CS2 and undeclared engineering majors stood out as high performers. CS majors passed the course at higher rates than other majors. Our large data set allowed for more granular analysis according to race and ethnicity and additional access to students' underserved status. Race and ethnicity had a significant correlation with performance, and so did the underserved status. Our large data set confirmed some of the findings of our previous work, while providing some new insight.},
booktitle = {Proceedings of the 54th ACM Technical Symposium on Computer Science Education V. 1},
pages = {896902},
numpages = {7},
keywords = {cs2, data structures, diversity, prior cs knowledge, student performance},
location = {Toronto ON, Canada},
series = {SIGCSE 2023}
}


%% ACM calls this 10.5555/3636988.3637021
@article{RW23:NDolphin,
author = {Reichard, Alex and Wonnacott, David G.},
title = {N-Dolphin: A Visualizer for Abstract Substitution-Based Execution},
year = {2023},
issue_date = {October 2023},
publisher = {Consortium for Computing Sciences in Colleges},
address = {Evansville, IN, USA},
volume = {39},
number = {3},
issn = {1937-4771},
abstract = {This paper presents N-Dolphin, a notional-machine visualizer coded in Racket, designed to enhance the learning experience for novice programmers by offering an interactive representation of substitution-based execution of Python code.N-Dolphin aims to make advanced programming concepts more intuitive and accessible to students. The tool offers a variety of code traversal techniques and novel functionality to help a beginner build a solid foundation for abstract reasoning about code and computation. N-Dolphin provides both substitution-based execution and a "step-over" feature, which are not combined in any readily-available tool, despite each, individually, being valuable for teaching challenging topics like recursion. Furthermore, N-Dolphin provides additional symbolic substitution steps, to provide support for symbolic reasoning about code. Finally, it provides an intuitive user interface for students to interact with code and visualize its execution.Although N-Dolphin is written in Racket and supports substitution-based execution, it currently presents code in eclectic-but-legal Python.},
journal = {J. Comput. Sci. Coll.},
month = {oct},
pages = {267–276},
numpages = {10}
}




%%%%%%%%%%%%%%  Articles published in 2024  %%%%%%%%%%%%%%

% Was 10.1145/3664191
@book{ACM23:CScurric,
author = {Kumar, Amruth N. and Raj, Rajendra K. and Aly, Sherif G. and Anderson, Monica D. and Becker, Brett A. and Blumenthal, Richard L. and Eaton, Eric and Epstein, Susan L. and Goldweber, Michael and Jalote, Pankaj and Lea, Douglas and Oudshoorn, Michael and Pias, Marcelo and Reiser, Susan and Servin, Christian and Simha, Rahul and Winters, Titus and Xiang, Qiao},
title = {Computer Science Curricula 2023},
year = {2024},
isbn = {9798400710339},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA}
}

% see https://tex.stackexchange.com/questions/135082/referencing-a-bachelors-thesis
% Note ACM has mastersthesis but not thesis...
@mastersthesis{Hill24:Thesis,
author={Jonathan Hill},
advisor={David G. Wonnacott},
title={Reducing Barriers to CS Through the Use of N-Dolphin/Orc$^2$a},
type={Bachelor's Thesis},
school={Haverford College},
department={computer science},
year=2024,
month={May}
}


%  "article" style includes newspapers, according to https://www.bibtex.com/e/entry-types/
@article{Closson24:NYT_Algebra,
  author   = "Troy Closson",
  title    = "The Algebra Problem: How Middle School Math Became a National Flashpoint",
  journal  = "The New York Times",
  year     = 2024,
  month    = {May}, day = {22},
  url      = {https://www.nytimes.com/2024/05/22/nyregion/middle-school-math-algebra.html}
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% WEB SITES AND ANYTHING ELSE KIND OF DATE-AMBIGUOUS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@misc{Web_Rosette, 
  title={The Rosette Guide},
  author={Emina Torlak}, 
  url={https://docs.racket-lang.org/rosette-guide/index.html}
}
  
 

%%%%%%%%%%%%%%  Websites published in 2019  %%%%%%%%%%%%%%
@misc{ASP_C, title={Advantages and disadvantages of C programming - discover the secrets of C}, 
url={https://data-flair.training/blogs/advantages-and-disadvantages-of-c/}, journal={DataFlair}, 
author={Team, DataFlair}, year={2019}, month={Jul}} 

%%%%%%%%%%%%%%  Websites published in 2020  %%%%%%%%%%%%%%
@misc{ASP_Java, title={The good and the bad of Java Programming},
url={https://www.altexsoft.com/blog/engineering/pros-and-cons-of-java-programming/}, 
journal={AltexSoft}, publisher={AltexSoft}, author={Editor}, year={2020}, month={Feb}} 

%%%%%%%%%%%%%%  Websites published in 2021  %%%%%%%%%%%%%%
@misc{ASP_Pyretdoc, 
title={The pyret code; or a rationale for the PYRET programming language}, 
url={https://www.pyret.org/pyret-code/}, journal={Pyret}, 
author={Crew, The Pyret}, year={2021}} 
 
@misc{ASP:Quorum, title={Programming Languages and learning}, url={https://quorumlanguage.com/evidence.html}, 
journal={Programming Languages and Learning - Quorum Programming Language}, 
author={Programming Language, The Quorum}, year={2021}} 

%%%%%%%%%%%%%%  Websites published in 2022  %%%%%%%%%%%%%%
@misc{ASP_Code_data, 
title={2022 state of CS Report}, 
url={https://advocacy.code.org/stateofcs}, 
journal={Code.org}, 
author={Advocacy Coalition, Code.org}, 
year={2022}}
 
@misc{ASP_Python, 
title={12 Pros and Cons of Python that you must be aware of!}, 
url={https://medium.com/@saadbenaicha/python-12-advantages-and-disadvantages-41bc407cf965}, 
journal={Medium}, publisher={Medium}, author={Benaicha, Saad}, year={2022}, month={Mar}} 

@misc{ASP_PBL_4_Codelicious, 
title={Project-Based Learning Framework and examples}, 
url={https://www.codelicious.com/blog/project-based-learning-computer-science-curriculum}, 
journal={Codelicious}, publisher={Codelicious}, author={Baird, Katie}, year={2022}, month={Jul}} 

@misc{ASP_Typing_Mozilla, title={Static typing - MDN web docs glossary: definitions of web-related terms: MDN}, 
url={https://developer.mozilla.org/en-US/docs/Glossary/Static_typing}, journal={MDN Web Docs Glossary: Definitions of Web-related terms | MDN}, 
author={contributors, MDN}, year={2022}} 


% Suggested at https://tex.stackexchange.com/questions/621270/how-to-cite-a-website
%  But, upon reading, it just points to SICP... also, it's a blog without author on this page, sigh.
%  ALSO also, the most interesting part in pointing out SICP, which is actually a capture from a ycombinator discussion among many people
% misc{Blog:WishfulThinking,
%  author = {{**** Dave needs to check ... certainly not Gabor ****}},
%  year = {n.d.},
%  title = {wiki.c2.com/?WishfulThinking},
%  note = {Accessed ******.  \url{wiki.c2.com/?WishfulThinking}}
% }
