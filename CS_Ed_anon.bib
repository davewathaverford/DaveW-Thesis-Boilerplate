%%  Auto-regenerating anonymous bibliography at Thu Jul  3 12:42:31 PM EDT 2025
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%                                                                                             %%%%%%%%
%%%%%%%%                                                                                             %%%%%%%%
%%%%%%%%                                    REMEMBER!                                                %%%%%%%%
%%%%%%%%                                                                                             %%%%%%%%
%%%%%%%%    Please update this file on the github repository, not in an overleaf project             %%%%%%%%
%%%%%%%%    Overleaf projects should link to the URL                                                 %%%%%%%%
%%%%%%%%           http://cs.haverford.edu/people/davew/DaveW-Thesis-Boilerplate/CS_Ed.bib           %%%%%%%%
%%%%%%%%    (Click "upload" (the up-arrow below "menu" in the upper left"),                          %%%%%%%%
%%%%%%%%     choose "From External URL", and paste that URL in the box,                              %%%%%%%%
%%%%%%%%     and, a couple of minutes after each edit, click "refresh" in the file in overleaf);     %%%%%%%%
%%%%%%%%     If that doesn't seem update from this git repo, every few minutes, email davew.)        %%%%%%%%
%%%%%%%%                                                                                             %%%%%%%%
%%%%%%%%    Unless you're editing directly on github.com, remember to pull first!                    %%%%%%%%
%%%%%%%%    (changes should show up within 2 min. if you "refresh" the imported file in overleaf)    %%%%%%%%
%%%%%%%%                                                                                             %%%%%%%%
%%%%%%%%    When adding to the bibliography:                                                         %%%%%%%%
%%%%%%%%      * please keep things sorted by year                                                    %%%%%%%%
%%%%%%%%        + Web sites, etc., should go at the end                                              %%%%%%%%
%%%%%%%%      * please use labels structured author(s) year ":" topic/idea/title, e.g.:              %%%%%%%%
%%%%%%%%        + 1-author papers, e.g. Sorva13:Notiona1                                             %%%%%%%%
%%%%%%%%        + many-author papers, e.g., CFF01:stepper, FFFK18:HtDP                               %%%%%%%%
%%%%%%%%        + Note:                                                                              %%%%%%%%
%%%%%%%%             standard structure makes it easy to type the citation in overleaf.com           %%%%%%%%
%%%%%%%%             if I have to edit these, I'll keep the old label as a comment, e.g. DuBoulay    %%%%%%%%
%%%%%%%%                                                                                             %%%%%%%%
%%%%%%%%    Last edits: 2025-07-03                                                                   %%%%%%%%
%%%%%%%%                                                                                             %%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%  List of CS Education articles, sorted by year, and, within that, alphabetically by first author
%%    Also, we could add comments like % TAG: ExperimentalDesign, and then search for them
%% Tags include: ExperimentalDesign, NotionalMachine, Recursion, LowLevel, OOP, Accessibility

@article{WO19:bridge,
  author       = {Anonymized Author and Other Coauthor},
  title        = {(anonymized title of tech report about pedagogy and tools)},
  journal      = {CoRR},
  eprinttype    = {arXiv}
}


%%%%%%%%%%%%%%  Articles published in 2020  %%%%%%%%%%%%%%

@article{Theobald_etal20:Underrepresented,
 title         = {Active learning narrows achievement gaps for underrepresented students in undergraduate science, technology, engineering, and math},
 author        = {Elli J. Theobald and Mariah J. Hill and Elisa Tran and Sweta Agrawal and E. Nicole Arroyo and Shawn Behling and Nyasha Chambwe and Dianne Laboy Cintrón and Jacob D. Cooper and Gideon Dunster and Jared A. Grummer and Kelly Hennessey and Jennifer Hsiao and Nicole Iranon and Leonard Jones II and Hannah Jordt and Marlowe Keller and Melissa E. Lacey and Caitlin E. Littlefield and Alexander Lowe and Shannon Newman and Vera Okolo and Savannah Olroyd and Brandon R. Peecook and Sarah B. Pickett and David L. Slager and Itzue W. Caviedes-Solis and Kathryn E. Stanchak and Vasudha Sundaravardan and Camila Valdebenito and Claire R. Williams and Kaitlin Zinsli and and Scott Freeman},
 journal        = {Proceedings of the National Academy of Sciences},
 publisher      = {National Academiy of Sciences},
 year           = 2020,
 month          = Mar,
 volume         = 117,
 number         = 12,
 doi            = {www.pnas.org/cgi/doi/10.1073/pnas.1916903117}
}


% inproceedings{10.1145/3437800.3439202,
% Interesting, Lewis is also, perhaps, Lewis14:Recursion
@inproceedings{all20:notional,
author = {Fincher, Sally and Jeuring, Johan and Miller, Craig S. and Donaldson, Peter and du Boulay, Benedict and Hauswirth, Matthias and Hellas, Arto and Hermans, Felienne and Lewis, Colleen and M\"{u}hling, Andreas and Pearce, Janice L. and Petersen, Andrew},
title = {Notional Machines in Computing Education: The Education of Attention},
year = {2020},
isbn = {9781450382939},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3437800.3439202},
doi = {10.1145/3437800.3439202},
abstract = {This report defines notional machines (NMs), and provides a series of definitional characteristics by which they may be identified. Over several sections, it includes a first-hand report of the origin of NMs, reports a systematic literature review to track the use and development of the concept, and presents a small collection of examples collected through interviews with experienced teachers. Additionally, the report presents NMs in a common format, and makes some preliminary explorations of their use in practice, including examples of instructors using multiple NMs in sequence. Approach and method are fully detailed in evidential appendices, to support replication of results and adoption/adaptation of practice.},
booktitle = {Proceedings of the Working Group Reports on Innovation and Technology in Computer Science Education},
pages = {21–50},
numpages = {30},
keywords = {computing education, notional machines},
location = {Trondheim, Norway},
series = {ITiCSE-WGR '20}
}

@inproceedings{10.1145/3328778.3366834,
author = {Valstar, Sander and Krause-Levy, Sophia and Macedo, Alexandra and Griswold, William G. and Porter, Leo},
title = {Faculty Views on the Goals of an Undergraduate CS Education and the Academia-Industry Gap},
year = {2020},
isbn = {9781450367936},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3328778.3366834},
doi = {10.1145/3328778.3366834},
abstract = {Previous work has found that recent computer science graduates often experience difficulty transitioning into their new roles in industry due to a significant gap between their academic experiences and industry's expectations. Although multiple studies have identified the views of students and members of industry on the value of a CS degree as preparation for industry, the faculty perspective on this topic remains unclear. Understanding these views could shed light on why the academia-industry gap has persisted despite the attention. This study identified faculty views on the goals of an undergraduate education and a CS major, focusing on preparation for careers in industry. In order to identify a spectrum of faculty views, we interviewed 14 faculty from a variety of backgrounds across three institutions. A phenomenographic analysis of the transcripts reveals that many faculty believe that industry preparation is an important programmatic goal, yet they encounter significant resource obstacles to achieving that goal.},
booktitle = {Proceedings of the 51st ACM Technical Symposium on Computer Science Education},
pages = {577–583},
numpages = {7},
keywords = {computer science education, academia-industry gap, phenomenography, faculty views},
location = {Portland, OR, USA},
series = {SIGCSE '20}
}


% TAG: math, equity, participation, algebra
@inproceedings{TMWF20:gatekeeper,
author = {Torbey, Ryan and Martin, Nicole D. and Warner, Jayce R. and Fletcher, Carol L.},
title = {Algebra I Before High School as a Gatekeeper to Computer Science Participation},
year = {2020},
isbn = {9781450367936},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3328778.3366877},
doi = {10.1145/3328778.3366877},
abstract = {A complex web of factors can influence whether students participate in computer science (CS) during high school. In order to increase participation in CS for all students, we need to better understand who is currently participating and what factors might be hindering participation. This study utilized a large-scale, student-level dataset from the Texas Education Research Center to investigate factors that predict high school student participation in CS and advanced CS courses. Our dataset contained information on over 1.1 million Texas high school students from the 2017-2018 school year, allowing us visibility into CS course availability in schools, student course taking, and detailed demographic information. We used multilevel mixed-effects logistic regression models to explore predictive factors of student participation in CS and advanced CS courses, limiting our analysis to students whose schools offered CS. In both models, our results showed that students who took Algebra I before high school had more than double the odds of being enrolled in a CS course. This work supports and extends previous understanding of factors that are predictive of CS participation in high school, contributing to the existing literature by uncovering the importance of Algebra I before high school as a potential gatekeeper to participation in CS.},
booktitle = {Proceedings of the 51st ACM Technical Symposium on Computer Science Education},
pages = {839–844},
numpages = {6},
keywords = {predictors of cs enrollment, participation, math pathways, k-12 course enrollment, high school cs, equity, cs pathways, broadening participation, algebra, access},
location = {Portland, OR, USA},
series = {SIGCSE '20}
}


@inproceedings{ASP_Tests,
author = {Wrenn, John and Krishnamurthi, Shriram},
title = {Will Students Write Tests Early Without Coercion?},
year = {2020},
isbn = {9781450389211},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3428029.3428060},
doi = {10.1145/3428029.3428060},
abstract = {Students faced with a programming task often begin their implementation without a sufficient understanding of the problem. Several prior papers suggest that formulating input–output examples before beginning one’s implementation is the key to averting problem misunderstandings, but that students are loath to actually do it. Is outright coercion instructors’ only hope to convince students to follow this methodology and hence help themselves? We conjecture that students’ reluctance may stem from the disaffordances of their programming environments. In this work, we augment the student’s programming environment to encourage examples-first development, and design a novel measure to assess students’ adherence to this methodology. We apply these measures to students using our modified environment in a semester-long course, and find high voluntary adherence, especially relative to the literature’s low expectations.},
booktitle = {Koli Calling '20: Proceedings of the 20th Koli Calling International Conference on Computing Education Research},
articleno = {27},
numpages = {5},
keywords = {testing, examples-first, Pyret, self-regulation, CS1, Examplar},
location = {Koli, Finland},
series = {Koli Calling '20}
}

@article{ASP_ACM_2030,
author = {Tissenbaum, Mike and Ottenbreit-Leftwich, Anne},
title = {A Vision of K---: 12 Computer Science Education for 2030},
year = {2020},
issue_date = {May 2020},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {63},
number = {5},
issn = {0001-0782},
url = {https://doi.org/10.1145/3386910},
doi = {10.1145/3386910},
abstract = {Exploring goals, perspectives, and challenges.},
journal = {Commun. ACM},
month = {apr},
pages = {42–44},
numpages = {3}
}


%%%%%%%%%%%%%%  Articles published in 2021  %%%%%%%%%%%%%%

@article{FD21:lowlevel,
	title = {A low-level approach to improve programming learning},
	volume = {20},
	issn = {1615-5289, 1615-5297},
	url = {https://link.springer.com/10.1007/s10209-020-00775-y},
	doi = {10.1007/s10209-020-00775-y},
	language = {en},
	number = {3},
	urldate = {2021-10-28},
	journal = {Universal Access in the Information Society},
	author = {Gallego-Durán, Francisco J. and Satorre-Cuerda, Rosana and Compañ-Rosique, Patricia and Villagrá-Arnedo, Carlos J. and Molina-Carmona, Rafael and Llorens-Largo, Faraón},
	month = aug,
	year = {2021},
	pages = {479--493}
}

@inproceedings{Fisler2021,
  author = {Fisler, Kathi and Schanzer, Emmanuel and Weimar, Steve and 
            Fetter, Annie and Renninger, K. Ann and 
            Krishnamurthi, Shriram and Politz, Joe Gibbs and 
            Lerner, Benjamin and Poole, Jennifer and Koerner, Christine},
  title = {Evolving a K-12 Curriculum for Integrating Computer
  Science into Mathematics},
  year = {2021},
  isbn = {9781450380621},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  doi = {doi:10.1145/3408877.3432546},
  booktitle = {Proceedings of the 52nd ACM Technical Symposium on
  Computer Science Education},
  pages = {59–65},
}


% doi =                 {10.1145/3472749.3474819},
@inproceedings{guo21:PyTutor,
author = {Guo, Philip},
title = {Ten Million Users and Ten Years Later: Python Tutor’s Design Guidelines for Building Scalable and Sustainable Research Software in Academia},
year = {2021},
isbn = {9781450386357},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3472749.3474819},
abstract = {Research software is often built as prototypes that never get widespread usage and are left unmaintained after a few papers get published. To counteract this trend, we propose a method for building research software with scale and sustainability in mind so that it can organically grow a large userbase and enable longer-term research. To illustrate this method, we present the design and implementation of Python Tutor (pythontutor.com), a code visualization tool that is, to our knowledge, one of the most widely-used pieces of research software developed within a university lab. Over the past decade, it has been used by over ten million people in over 180 countries. It has also contributed to 55 publications from 35 research groups in 13 countries. We distilled lessons from working on Python Tutor into three sets of design guidelines: 1) user experience design for scale and sustainability, 2) software architecture design for long-term sustainability, and 3) designing a sustainable software development workflow within academia. These guidelines can enable a student to create long-lasting software that reaches many users and facilitates research from many independent groups.},
booktitle = {The 34th Annual ACM Symposium on User Interface Software and Technology},
pages = {1235–1251},
numpages = {17},
keywords = {sustainability, research software, code visualization, Python Tutor},
location = {Virtual Event, USA},
series = {UIST '21}
}

@inproceedings{10.1145/3505711.3505728,
author = {Thi Van Pham, Anh and Huu Tran, Thien},
title = {The Implementation of Project-Based Learning Approach in Technical Courses: An Investigation into Students’ Perceptions},
year = {2021},
isbn = {9781450390699},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3505711.3505728},
doi = {10.1145/3505711.3505728},
abstract = {Project-based learning is widely regarded as a viable strategy for enhancing student learning in higher education. Project-based learning effectively bridges the theoretical and practical education gaps by encouraging true knowledge, initiative, and a greater comprehension of the subject. This study was conducted to explore students’ perceptions towards the implementation of project-based learning in technical courses in a college in Vietnam where this method has been employed for several years. Data were collected from 98 students majoring in website design and software engineering courses. The questionnaire was developed in Google Form, and the link was sent to the participants via their email addresses. The results show that most of the students have positive perceptions of project-based learning approach. Students indicated that they gained confidence, enhanced their critical thinking and problem-solving abilities in computing disciplines, and enhanced their ability to communicate, engage, and work with team members, contributing to the overall quality of education.},
booktitle = {2021 The 5th International Conference on Advances in Artificial Intelligence (ICAAI)},
pages = {124–129},
numpages = {6},
keywords = {Technical courses, Project-based learning, Students’ perception},
location = {Virtual Event, United Kingdom},
series = {ICAAI 2021}
}

@inproceedings{ASP_ErrorM_Readability,
author = {Denny, Paul and Prather, James and Becker, Brett A. and Mooney, Catherine and Homer, John and Albrecht, Zachary C and Powell, Garrett B.},
title = {On Designing Programming Error Messages for Novices: Readability and Its Constituent Factors},
year = {2021},
isbn = {9781450380966},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3411764.3445696},
doi = {10.1145/3411764.3445696},
abstract = {Programming error messages play an important role in learning to program. The cycle of program input and error message response completes a loop between the programmer and the compiler/interpreter and is a fundamental interaction between human and computer. However, error messages are notoriously problematic, especially for novices. Despite numerous guidelines citing the importance of message readability, there is little empirical research dedicated to understanding and assessing it. We report three related experiments investigating factors that influence programming error message readability. In the first two experiments we identify possible factors, and in the third we ask novice programmers to rate messages using scales derived from these factors. We find evidence that several key factors significantly affect message readability: message length, jargon use, sentence structure, and vocabulary. This provides novel empirical support for previously untested long-standing guidelines on message design, and informs future efforts to create readability metrics for programming error messages.},
booktitle = {Proceedings of the 2021 CHI Conference on Human Factors in Computing Systems},
articleno = {55},
numpages = {15},
keywords = {CS1, human computer interaction, programming error messages, students, compiler design and implementation, novice programmers, compiler error messages, HCI, introductory programming, readability},
location = {Yokohama, Japan},
series = {CHI '21}
}

%%%%%%%%%%%%%%  Articles published in 2022  %%%%%%%%%%%%%%
@inproceedings{DRB22,
author = {Dickson, Paul E. and Richards, Tim and Becker, Brett A.},
title = {Experiences Implementing and Utilizing a Notional Machine in the Classroom},
year = {2022},
isbn = {9781450390705},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3478431.3499320},
doi = {10.1145/3478431.3499320},
abstract = {In the computing education community, discussion is growing about the benefits of teaching programming by explicitly using notional machines to help students. To-date most work is largely theoretical and little work addresses actually using them in a classroom. This paper documents our experience of creating a notional machine for a specific course and using it in that classroom. A key point we learned while creating this notional machine is that many of the difficulties encountered were due to the concept of a notional machine being tightly coupled to students' mental models. Although not surprising, the numerous complications this brings are important to overcome. The potential amount of detail included in the notional machine is enormously influenced by the students' mental models, which are likely specific to a course, and also change throughout a semester -- and certainly across several semesters. We present lessons learned from this experience, among them that implementing a notional machine and using it in class is a non-trivial yet possibly beneficial exercise.},
booktitle = {Proceedings of the 53rd ACM Technical Symposium on Computer Science Education - Volume 1},
pages = {850–856},
numpages = {7},
keywords = {stack traces, visualization, memory diagrams, notional machines, program construction, mental models, pedagogy, code writing, introductory programming, code tracing, cs1},
location = {Providence, RI, USA},
series = {SIGCSE 2022}
}

% also 10.1145/3502718.3524755
@inproceedings{QNCNAS22:predicting,
author = {Quille, Keith and Nam Liao, Soohyun and Costelloe, Eileen and Nolan, Keith and Mooney, Aidan and Shah, Kartik},
title = {PreSS: Predicting Student Success Early in CS1. A Pilot International Replication and Generalization Study},
year = {2022},
isbn = {9781450392013},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3502718.3524755},
doi = {10.1145/3502718.3524755},
abstract = {This work piloted an international replication and generalization study on an existing prediction model called PreSS. PreSS has been developed and validated over nearly two decades and can predict student performance in CS1 with nearly 71\% accuracy, at a very early stage in the learning module. Motivated by a prior validation study and its competitive modelling accuracy, we chose PreSS for such an international replication and generalization study. The study took place in two countries, with two institutions in Ireland and one institution in the US, totalling 472 students throughout the academic year 2020-21. In doing so, this study addressed a call from the 2015 ITiCSE working group for the educational data mining and learning analytics community: systematically analyse and verify previous studies using data from multiple contexts to tease out tacit factors that contribute to previously observed outcomes. This pilot study achieved 90\% accuracy, which is higher than the prior work's. This encouraging finding sets the foundations for a larger scale international study. This paper describes in detail the pilot replication and generalization study and our progress on the larger scale study which is taking place across six continents.},
booktitle = {Proceedings of the 27th ACM Conference on on Innovation and Technology in Computer Science Education Vol. 1},
pages = {54–60},
numpages = {7},
keywords = {programming, predicting success, machine learning, cs1, computer science education},
location = {Dublin, Ireland},
series = {ITiCSE '22}
}


% see https://tex.stackexchange.com/questions/135082/referencing-a-bachelors-thesis
@mastersthesis{Shukla22:Thesis,
author={Student (anonymized)},
advisor={Advisor},
title={Title},
type={Bachelor's Thesis},
school={(anonymized)},
department={computer science},
year=2022,
month={May}
}

@article{SW22:recursion,
author = {Student (anonymized) and Advisor},
title = {Title},
year = {2022},
journal = {Proceedings of a small regional meeting}
}


@article{ASP:PBL_1,
author = {Malik, Khalid and Zhu, Meina},
year = {2022},
month = {09},
pages = {1-24},
title = {Do project-based learning, hands-on activities, and flipped teaching enhance student’s learning of introductory theoretical computing classes?},
journal = {Education and Information Technologies},
doi = {10.1007/s10639-022-11350-8}
}

%%%%%%%%%%%%%%  Articles published in 2023  %%%%%%%%%%%%%%


% TAG: race, retention; but, -math only mentioned in cited work, not explored (this work also cites Bergin and Reilly about high-school math and CS1, but Bergin & Reilly don't mention race/minority: https://dl.acm.org/doi/pdf/10.1145/1047344.1047480)
% ACM calls this 10.1145/3545945.3569867
@inproceedings{EH23:StudyCS2,
author = {Ellis, Margaret and Hooshangi, Sara},
title = {Replication and Expansion Study on Factors Influencing Student Performance in CS2},
year = {2023},
isbn = {9781450394314},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3545945.3569867},
doi = {10.1145/3545945.3569867},
abstract = {While many studies have focused on students' performance in CS1 courses,
              research related to the performance and persistence of students in CS2 classes is not as widely performed.
           In this work, we will extend our previous work to examine students' performance in CS2.
           We examined a data set that spanned over seven years on more than 5300 student records.
           In addition to typical factors studied by others (i.e. gender, race, CS1 performance), our work also took into account
              the relationship between various CS1 pathways to CS2, student major,
              and the number of previous college CS courses (including transfer credits) and student performance in CS2.
           CS1 grade is a good indicator of performance in CS2.
           Gender was not a significant factor in determining performance in CS2 and undeclared engineering majors stood out as high performers.
           CS majors passed the course at higher rates than other majors.
           Our large data set allowed for more granular analysis according to race and ethnicity and additional access to students' underserved status.
           Race and ethnicity had a significant correlation with performance, and so did the underserved status.
           Our large data set confirmed some of the findings of our previous work, while providing some new insight.},
booktitle = {Proceedings of the 54th ACM Technical Symposium on Computer Science Education V. 1},
pages = {896902},
numpages = {7},
keywords = {cs2, data structures, diversity, prior cs knowledge, student performance},
location = {Toronto ON, Canada},
series = {SIGCSE 2023}
}

%10.5555/3606402.3606430
@article{CD23:survey,
author = {Char, Bruce and Dougherty, John P.},
title = {A Study of the Perception of Mathematics as a Learning Tool for Computer Science Undergraduates},
year = {2023},
issue_date = {April 2023},
publisher = {Consortium for Computing Sciences in Colleges},
address = {Evansville, IN, USA},
volume = {38},
number = {8},
issn = {1937-4771},
abstract = {Most programs in computer science undergraduate programs have evolved from a mathematics program, an engineering program, or some other combination. In computer science education, we will often exploit problems from mathematics with computational solutions to introduce and develop a deep understanding of computational concepts and skills related to program development and analysis. However, it needs to be clarified the degree to which students in undergraduate computer science programs see this connection between what they are learning and the role that mathematics can play in increasing the understanding of that learning. Do they view the mathematics they encounter as one of the unavoidable burdens that the major makes them endure to get a degree but will not need much after graduation? Or do they see mathematical learning and inventive thinking as something that they will need to do on a continuing basis even after graduation? The authors developed an instrument that could be used to gather evidence to understand better how our students look at the role of mathematics in their computer science courses and projects. Beginning in the fall of 2021 a survey instrument was developed and administered to students primarily at Haverford College. Students who completed the initial prototype survey were enrolled in an accelerated CS1-CS2 course where they had experience with programming before attending college. It is also assumed that they have been exposed to mathematics throughout their education. It should also be clear that in this context mathematics is defined expansively to include algebraic and other numerical manipulations of data, as well as problem-solving techniques to divide and conquer complicated problems, appreciating and understanding the use of abstraction [2], reasoning about the state of various parts of computation through the out the execution process, as well as this distinction between verification by proof versus testing. At Drexel University, students in computer science are required to complete courses in calculus. Meanwhile, at Haverford College students are required to complete a course in discrete mathematics as well as one of two choices between analysis of algorithms and theory of computation. At each school, other courses either directly or tangentially related to mathematics are taken by students to increase their understanding and prepare them for courses that apply to computing. The obvious fields are computer science and mathematics, but also include machine learning, data science, scientific computing, and computational linguistics. Perhaps we should have expected, responses to the prototype to have indicated that students have a variety of impressions about the role of mathematics in their studies for computer science. Some of them may impact the development of persistent robust self-regulated mathematical thinking and learning even after entry into the workforce. We suspect that students in computer science do not perceive how mathematics is used in the field and thus either delay or avoid mathematics or leave the field of computer science. Perhaps students find mathematics irrelevant, unengaging, we're simply too difficult, our goal with this project is to identify first if this disconnect between math and computer science exists we're not. Our intention is to identify obstacles and suggests approaches to help computer science educators provide this mathematical foundation for computer science students [3]. We plan to continue this study to get a clearer picture of how students look at the role of mathematics. We believe that a sound foundation in math contributes positively to those in computer science [1, 4].},
journal = {J. Comput. Sci. Coll.},
month = {apr},
pages = {222–223},
numpages = {2}
}

%% ACM calls this 10.5555/3636988.3637021
@article{RW23:NDolphin,
author = {Recent Graduate (anonymized) and Faculty Advisor (anonymized)},
title = {Anonymized, if that matters ... please don't web search},
year = {2023},
journal = {Proceedings of a small regional meeting}
}


@inproceedings{Ren23:gamification,
author = {Ren, Wei},
title = {Gamification in Test-Driven Development Practice},
year = {2023},
isbn = {9798400703737},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3617553.3617889},
doi = {10.1145/3617553.3617889},
abstract = {The challenge of effectively developing and sustaining high-performance professional development practices in software engineering education is one that must be addressed. Test-driven development (TDD), an example of a key professional practical activity, is strongly linked to these high-performance practices. To examine the effects of gamification - the use of game design elements in a non-game context - on motivating students to develop and sustain TDD practice, an experiment was conducted and utilized ordinary least squares (OLS) regression to analyze the data. This experiment showed that gamification motivates students to do high-performing TDD practice. More specifically, gamification changes the individual's TDD behavior, increases engagement in the development activity, and the effect continues for a longer period even after gamification has ceased. Furthermore, a positive association between gamification and the maintainability of the team codebase was supported by the data.},
booktitle = {Proceedings of the 2nd International Workshop on Gamification in Software Development, Verification, and Validation},
pages = {38–46},
numpages = {9},
keywords = {Test-driven Development, Software Engineering, Maintainability, Gamification, Engagement},
location = {San Francisco, CA, USA},
series = {Gamify 2023}
}


%%%%%%%%%%%%%%  Articles published in 2024  %%%%%%%%%%%%%%

% Was 10.1145/3664191
@book{ACM23:CScurric,
author = {Kumar, Amruth N. and Raj, Rajendra K. and Aly, Sherif G. and Anderson, Monica D. and Becker, Brett A. and Blumenthal, Richard L. and Eaton, Eric and Epstein, Susan L. and Goldweber, Michael and Jalote, Pankaj and Lea, Douglas and Oudshoorn, Michael and Pias, Marcelo and Reiser, Susan and Servin, Christian and Simha, Rahul and Winters, Titus and Xiang, Qiao},
title = {Computer Science Curricula 2023},
year = {2024},
isbn = {9798400710339},
doi = {https://dl.acm.org/doi/10.1145/3664191},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA}
}


@inproceedings{KR24:ACM_curricula_trivial_report,
author = {Kumar, Amruth N. and Raj, Rajendra K.},
title = {Computer Science Curricula 2023 (CS2023): The Final Report},
year = {2024},
isbn = {9798400704246},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3626253.3633405},
doi = {10.1145/3626253.3633405},
abstract = {A joint task force of the ACM, IEEE-Computer Society, and AAAI has updated the computer science curricular guidelines last published in 2013. Included in the updated guidelines, referred to as CS2023, is a revised knowledge model and a new framework for building a customized competency model of the computer science curriculum. Acknowledging that one size does not fit all, the guidelines provide flexibility for computer science programs to structure their curriculum around the competency area(s) they wish to target. Given the pervasiveness of computing in everyday life, the guidelines emphasize the importance of society, ethics, and issues of the computing profession throughout the curriculum. The role of mathematics has been expanded in the guidelines, particularly in response to the latest developments in artificial intelligence. The curricular guidelines will be accompanied by articles written by experts on curricular issues such as ethics, computing for the social good, and accessibility. In the special session, the CS2023 curricular guidelines will be presented, and feedback solicited on facilitating their adoption and adaptation. The session is aimed at computer science educators, administrators, and professionals interested in computer science education.},
booktitle = {Proceedings of the 55th ACM Technical Symposium on Computer Science Education V. 2},
pages = {1867–1868},
numpages = {2},
keywords = {competency model, computer science curricula, computer science education, curricular guidelines, curricular practices, knowledge model, model curricula},
location = {Portland, OR, USA},
series = {SIGCSE 2024}
}

% see https://tex.stackexchange.com/questions/135082/referencing-a-bachelors-thesis
% Note ACM has mastersthesis but not thesis...
@mastersthesis{Hill24:Thesis,
author={Student (anonymized)},
advisor={Advisor (anonymized)},
title={anonymized senior thesis title},
type={Bachelor's Thesis},
school={anonymized institution},
department={computer science},
year=2024,
month={May}
}


%  "article" style includes newspapers, according to https://www.bibtex.com/e/entry-types/
@article{Closson24:NYT_Algebra,
  author   = "Troy Closson",
  title    = "The Algebra Problem: How Middle School Math Became a National Flashpoint",
  journal  = "The New York Times",
  year     = 2024,
  month    = {May}, day = {22},
  url      = {https://www.nytimes.com/2024/05/22/nyregion/middle-school-math-algebra.html}
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% WEB SITES AND ANYTHING ELSE KIND OF DATE-AMBIGUOUS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@misc{Web_Rosette, 
  title={The Rosette Guide},
  author={Emina Torlak}, 
  url={https://docs.racket-lang.org/rosette-guide/index.html}
}



@misc{Web_coq, 
  title={The Coq Proof Assistant},
  author={{Coq Team}, The}, 
  url={https://coq.inria.fr/},
  note={(Readers from the future or past, please note the web site said ``The Coq team has decided that Coq will be renamed into 'The Rocq Prover'.'' in January 2025.)}
}



% Found a reference to this in Neff's 2010 paper, but his URL gave me a 404 (Sept 2024), so, off to visit Mr. Peabody....
@misc{MB07:DiscreteReport_archived, 
  title={SIGCSE Committeee Report On the Implementation of a Discrete Mathematics Course (Marion and Baldwin, editors)},
  year=2007,
  author={Marion, Bill and Baldwin, Doug}, 
  url={http://web.archive.org/web/20091128061308/http://www.sigcse.org/resources/discrete-mathematics/DiscreteMathReport.pdf}
}

%%%%%%%%%%%%%%  Websites published in 2019  %%%%%%%%%%%%%%
@misc{ASP_C, title={Advantages and disadvantages of C programming - discover the secrets of C}, 
url={https://data-flair.training/blogs/advantages-and-disadvantages-of-c/}, journal={DataFlair}, 
author={Team, DataFlair}, year={2019}, month={Jul}} 

%%%%%%%%%%%%%%  Websites published in 2020  %%%%%%%%%%%%%%
@misc{ASP_Java, title={The good and the bad of Java Programming},
url={https://www.altexsoft.com/blog/engineering/pros-and-cons-of-java-programming/}, 
journal={AltexSoft}, publisher={AltexSoft}, author={Editor}, year={2020}, month={Feb}} 

%%%%%%%%%%%%%%  Websites published in 2021  %%%%%%%%%%%%%%
@misc{ASP_Pyretdoc, 
title={The pyret code; or a rationale for the PYRET programming language}, 
url={https://www.pyret.org/pyret-code/}, journal={Pyret}, 
author={Crew, The Pyret}, year={2021}} 
 
@misc{ASP:Quorum, title={Programming Languages and learning}, url={https://quorumlanguage.com/evidence.html}, 
journal={Programming Languages and Learning - Quorum Programming Language}, 
author={Programming Language, The Quorum}, year={2021}} 

%%%%%%%%%%%%%%  Websites published in 2022  %%%%%%%%%%%%%%
@misc{ASP_Code_data, 
title={2022 state of CS Report}, 
url={https://advocacy.code.org/stateofcs}, 
journal={Code.org}, 
author={Advocacy Coalition, Code.org}, 
year={2022}}
 
@misc{ASP_Python, 
title={12 Pros and Cons of Python that you must be aware of!}, 
url={https://medium.com/@saadbenaicha/python-12-advantages-and-disadvantages-41bc407cf965}, 
journal={Medium}, publisher={Medium}, author={Benaicha, Saad}, year={2022}, month={Mar}} 

@misc{ASP_PBL_4_Codelicious, 
title={Project-Based Learning Framework and examples}, 
url={https://www.codelicious.com/blog/project-based-learning-computer-science-curriculum}, 
journal={Codelicious}, publisher={Codelicious}, author={Baird, Katie}, year={2022}, month={Jul}} 

@misc{ASP_Typing_Mozilla, title={Static typing - MDN web docs glossary: definitions of web-related terms: MDN}, 
url={https://developer.mozilla.org/en-US/docs/Glossary/Static_typing}, journal={MDN Web Docs Glossary: Definitions of Web-related terms | MDN}, 
author={contributors, MDN}, year={2022}} 


% Suggested at https://tex.stackexchange.com/questions/621270/how-to-cite-a-website
%  But, upon reading, it just points to SICP... also, it's a blog without author on this page, sigh.
%  ALSO also, the most interesting part in pointing out SICP, which is actually a capture from a ycombinator discussion among many people
% misc{Blog:WishfulThinking,
%  author = {{**** Dave needs to check ... certainly not Gabor ****}},
%  year = {n.d.},
%  title = {wiki.c2.com/?WishfulThinking},
%  note = {Accessed ******.  \url{wiki.c2.com/?WishfulThinking}}
% }
